/*jshint latedef:false*/

//Config - whitelabelAppConfig

(function() {

    'use strict';

    angular
        .module('whitelabelApp', [
            'ngRoute',
            'ngSanitize',
            'ngDialog',
            'ngAria',
            'ngAnimate',
            'selectize',
            'templateKeeper',
            'LocalStorageModule',
            'angAccordion',
            '720kb.tooltips',
            'matchmedia-ng',
            'angularRipple',
            'ssMenu',
            'ssMenuItem',
            'ssDatePicker',
            'ssTimePicker',
            'ssCheckbox',
            'ssTabset',
            'ssTab',
            'ssLoader',
            'ssSelect',
            'ssBackToTop',
            'ssMessages',
            'ssButton',
            'angular-momentjs',
            'pascalprecht.translate',
            'app.service.menu',
            'app.service.news',
            'app.service.title',
            'app.service.auth',
            'app.service.storage',
            'app.service.saveforms',
            'app.service.validation',
            'app.service.flash',
            'app.service.api',
            'app.service.search',
            'app.service.global',
            'app.service.reference',
            'app.service.forms',
            'app.service.notifications',
            'app.service.focus'
        ])
        .config(whitelabelAppConfig);

    whitelabelAppConfig.$inject = ['$routeProvider', '$locationProvider', '$httpProvider', '$provide', 'localStorageServiceProvider', 'ngDialogProvider', '$translateProvider', 'tooltipsConfProvider'];

    function whitelabelAppConfig($routeProvider, $locationProvider, $httpProvider, $provide, localStorageServiceProvider, ngDialogProvider, $translateProvider, tooltipsConfProvider) {

        $provide.decorator('$templateCache', function($delegate) {
            var originalGet = $delegate.get;

            $delegate.get = function(key) {
                var value;
                value = originalGet(key);
                if (!value) {

                    if (value) {
                        $delegate.put(key, value);
                    }
                }
                return value;
            };

            return $delegate;
        });

        $locationProvider.baseHref = '/webapp';

        //initialize get if not there
        if (!$httpProvider.defaults.headers.get) {
            $httpProvider.defaults.headers.get = {};
        }

        // Answer edited to include suggestions from comments
        // because previous version of code introduced browser-related errors

        //disable IE ajax request caching
        $httpProvider.defaults.headers.get['If-Modified-Since'] = 'Mon, 26 Jul 1997 05:00:00 GMT';
        // extra
        $httpProvider.defaults.headers.get['Cache-Control'] = 'no-cache';
        $httpProvider.defaults.headers.get.Pragma = 'no-cache';

        $translateProvider
            .useStaticFilesLoader({
                prefix: 'locales/',
                suffix: '.json'
            })
            .preferredLanguage('en')
            .fallbackLanguage('en');

        $locationProvider.html5Mode({
            enabled: false,
            requireBase: true
        });

        $translateProvider.useSanitizeValueStrategy('sanitize');

        localStorageServiceProvider
            .setPrefix('whitelabel')
            .setStorageType('localStorage')
            .setNotify(true, true);

        localStorageServiceProvider
            .setStorageCookie(45, '/');

        $routeProvider

            .when('/logout', {
            reloadOnSearch: false
        })

        .otherwise({
            redirectTo: '/login'
        });

        ngDialogProvider.setDefaults({
            className: 'ngdialog-theme-default',
            showClose: true,
            closeByDocument: true,
            closeByEscape: true
        });

        tooltipsConfProvider.configure({
            'smart': true,
            'size': 'small',
            'speed': 'fast'
        });

    }

})();

//Constant - whitelabelAppConstant

(function() {

    'use strict';

    angular
        .module('whitelabelApp')
        .constant('_', window._);

})();

//Run - whitelabelAppRun

(function() {

    'use strict';

    angular
        .module('whitelabelApp')
        .run(whitelabelAppRun);

    whitelabelAppRun.$inject = ['$rootScope', '$location', '$window', 'AuthFactory', 'GlobalFactory'];

    function whitelabelAppRun($rootScope, $location, $window, AuthFactory, GlobalFactory) {


        $rootScope._ = window._;

        /**
         * Watch for route change
         * @param {String} event
         * @param {String} next
         * @return {String} sum
         */

        $rootScope.$on('$routeChangeStart', function(event, next) {

            window.scrollTo(0, 0);

            if (next.hideMenu) {
                $rootScope.hideMenu = true;
            } else {
                $rootScope.hideMenu = false;
            }

            if ($location.path() === '/logout') {
                AuthFactory.logout();
            }

            if (next.requireLogin) {
                if (AuthFactory.checkToken() === false) {
                    $location.path('/login');
                    event.preventDefault();
                } else {
                    if (next.roleTypes) {
                        if (!GlobalFactory.inArray(next.roleTypes, AuthFactory.getRole())) {
                            $location.path('/dashboard');
                            event.preventDefault();
                        }
                    }
                }
            }
        });

    }

})();

/*jshint latedef:false*/

//Controller - AppController

(function () {

    'use strict';

    angular
        .module('whitelabelApp')
        .controller('AppController', AppController);

    AppController.$inject = ['$scope', '$timeout', '$interval', '$location', '$filter', '$moment', 'ApiUrl', 'ReferenceFactory', 'StorageFactory', 'GlobalFactory', 'NotificationsFactory', 'ValidationFactory', 'AuthFactory', 'MenuFactory', 'ngDialog', 'matchmedia'];

    /**
     * App controller
     *
     * @param {!angular.Scope} $scope
     * @constructor
     * @ngInject
     * @export
     */

    function AppController($scope, $timeout, $interval, $location, $filter, $moment, ApiUrl, ReferenceFactory, StorageFactory, GlobalFactory, NotificationsFactory, ValidationFactory, AuthFactory, MenuFactory, ngDialog, matchmedia) {

        //var vm = this;

        $scope.glob = {};

        $scope.webappUrl = '';
        $scope.media = {
            phone: false,
            tablet: false,
            desktop: false
        };

        matchmedia.on('(min-width: 0px) and (max-width: 689px)', function (query) {
            if (query.matches) {
                $scope.media.phone = true;
            } else {
                $scope.media.phone = false;
            }
        });

        matchmedia.on('(min-width: 690px) and (max-width: 919px)', function (query) {
            if (query.matches) {
                $scope.media.tablet = true;
            } else {
                $scope.media.tablet = false;
            }
        });

        matchmedia.on('(min-width: 920px)', function (query) {
            if (query.matches) {
                $scope.media.desktop = true;
            } else {
                $scope.media.desktop = false;
            }
        });

        $scope.navOptionsVert = {
            open: true,
            mini: false,
            media: $scope.media,
            type: 'vert',
            pages: MenuFactory.main(),
            account: MenuFactory.account()
        };

        $scope.navOptionsAccount = {
            open: null,
            mini: null,
            media: $scope.media,
            type: 'horz',
            pages: MenuFactory.account()
        };

        $scope.toggleMenu = function () {
            $scope.navOptionsVert.open = !$scope.navOptionsVert.open;
        };

        $scope.placeholder = 'app.global.all';

        $scope.dateStyle = 'MM/dd/yyyy';

        $scope.updateWorktasks = function () {
            NotificationsFactory.connect()
                .success(function (data) {

                    $scope.completedWorkTasks = [];
                    $scope.availableWorkTasks = [];

                    for (var s = 0; s < data.length; s++) {

                        if (data[s].taskStatus === 'Completed') {
                            $scope.completedWorkTasks.push(data[s]);
                        } else {
                            $scope.availableWorkTasks.push(data[s]);
                        }
                    }

                });
        };

        $scope.updateWorktasks();

        $interval(function () {
            $scope.updateWorktasks();
        }, 180000);

        $scope.toTheTop = function () {
            window.scrollTo(0, 0);
        };

        $scope.isExternal = function () {
            if ($location.$$path === '/login') {
                return true;
            }
            return false;
        };

        $scope.removeFromArray = function (array, item) {
            return GlobalFactory.removeFromArray(array, item);
        };

        $scope.checkValidDate = function (date, dep, allowFuture) {
            return GlobalFactory.dateValid(date, false, false, dep, allowFuture);
        };

        $scope.checkValidTime = function (date, time, dep, allowFuture) {
            return GlobalFactory.dateValid(date, time, true, dep, allowFuture);
        };

        $scope.inArray = function (array, thing) {
            return GlobalFactory.inArray(array, thing);
        };

        $scope.hasEntry = function (entry) {
            if (entry) {
                if (entry !== 0 && entry !== '0' && entry !== null) {
                    return true;
                }
            }
            return false;
        };

        $scope.focusPrevious = function (name, array, dd) {
            var id = name + (array.length - 1);
            if (dd) {
                $timeout(function () {
                    $('#' + id).find('.selectize-input:first').trigger('click');
                });
            } else {
                var element = document.getElementById(id);
                element.focus();
            }
        };

        $scope.today = new Date();

        $scope.credentials = {
            user: {}
        };

        $scope.errors = [];
        $scope.messages = [];

        $scope.close = {};

        $scope.dateOptions = {};
        $scope.dateFormat = 'dd/MM/yyyy';

        $scope.credentials.user.username = 'user1';
        $scope.credentials.user.password = 'user1';

        $scope.isAuthenticated = function () {
            if (!$scope.credentials || !$scope.credentials.user) {
                $scope.logout();
            }
        };

        $scope.logout = function () {
            $scope.credentials = {};
            $location.path('/location');
        };

        $scope.discardSave = function (title, message, url) {

            $scope.close = {
                title: title,
                message: message
            };

            ngDialog.open({
                templateUrl: 'core/elements/discard.template.html',
                scope: $scope,
                preCloseCallback: function (value) {
                    if (value === true) {
                        $scope.goToPage(url);
                    }
                }
            });
        };

        $scope.hasDateValid = function (list, date, time, step, check, errors, valid) {
            return ValidationFactory.hasDateValid(list, date, time, step, check, errors, valid);
        };

        $scope.checkNextEntry = function (check, array) {

            if (!check) {
                for (var i in array) {
                    if (!array[i].isValid) {
                        return false;
                    }
                }
            }
            return true;
        };

        $scope.goToPage = function (url, discard) {

            if (discard) {
                $scope.discardSave('app.global.leave.title', 'app.global.leave.message', url);
            } else {
                $location.path('/' + url);
            }
        };

        var init = function () {

            $scope.animation = {
                headIcon: 'animated fadeInLeft',
                headText: 'animated fadeInDown'
            };

            $scope.completedWorkTasks = [];
            $scope.availableWorkTasks = [];

            AuthFactory.setRole('admin');

        };

        init();

    }

})();

/*jshint ignore:start*/

//Config - ngTranslate

angular.module('ngTranslate', ['ng']).config(['$provide', function (n) {
    $TranslateProvider = function () {
        var n, t = {};
        this.translations = function (n, r) {
            if (!n && !r) return t;
            if (n && !r) {
                if (angular.isString(n)) return t[n];
                t = n
            } else t[n] = r
        }, this.uses = function (r) {
            if (!r) return n;
            if (!t[r]) throw Error('$translateProvider couldn\'t find translationTable for langKey:' + r);
            n = r
        }, this.$get = ['$interpolate', '$log', function (r, a) {
            return $translate = function (e, i) {
                var l = n ? t[n][e] : t[e];
                return l ? r(l)(i) : (a.warn('Translation for " + e + " doesn\'t exist'), e)
            }
        }]
    }, n.provider('$translate', $TranslateProvider)
}]), angular.module('ngTranslate').directive('translate', ['$filter', '$interpolate', function (n, t) {
    var r = n('translate');
    return {
        restrict: 'A',
        scope: !0,
        link: function (n, a, e) {
            e.$observe('translate', function (r) {
                n.translationId = angular.equals(r, '') ? t(a.text())(n.$parent) : r
            }), e.$observe('values', function (t) {
                n.interpolateParams = t
            }), n.$watch('translationId + interpolateParams', function () {
                a.html(r(n.translationId, n.interpolateParams))
            })
        }
    }
}]), angular.module('ngTranslate').filter('translate', ['$parse', '$translate', function (n, t) {
    return function (r, a) {
        return angular.isObject(a) || (a = n(a)()), t(r, a)
    }
}]);

/*jshint ignore:end*/

/*jshint latedef:false*/

//Config - dashboardConfig

(function() {

    'use strict';

    angular
        .module('whitelabelApp')
        .config(dashboardConfig);

    dashboardConfig.$inject = ['$routeProvider'];

    function dashboardConfig($routeProvider) {

        $routeProvider

            //Dashboard

            .when('/dashboard', {
                requireLogin: true,
                roleTypes: ['admin'],
                templateUrl: 'dashboard/dashboard.template.html',
                controller: 'DashboardCtrl'
            });
    }

})();
/*jshint latedef:false*/

//Config - loginConfig

(function() {

    'use strict';

    angular
        .module('whitelabelApp')
        .config(loginConfig);

    loginConfig.$inject = ['$routeProvider'];

    function loginConfig($routeProvider) {

        $routeProvider

        //Dashboard

            .when('/login', {
            templateUrl: 'login/login.template.html',
            hideMenu: true,
            controller: 'LoginCtrl'
        });
    }

})();

/*jshint latedef:false*/

//Config - newsConfig

(function() {

    'use strict';

    angular
        .module('whitelabelApp')
        .config(newsConfig);

    newsConfig.$inject = ['$routeProvider'];

    function newsConfig($routeProvider) {

        $routeProvider

        //Notifications

            .when('/news', {
            templateUrl: 'news/news.template.html',
            controller: 'NewsCtrl'
        });
    }

})();

/*jshint latedef:false*/

//Config - notificationsConfig

(function() {

    'use strict';

    angular
        .module('whitelabelApp')
        .config(notificationsConfig);

    notificationsConfig.$inject = ['$routeProvider'];

    function notificationsConfig($routeProvider) {

        $routeProvider

            //Notifications

            .when('/notifications', {
                requireLogin: true,
                roleTypes: ['admin'],
                templateUrl: 'notifications/notifications.template.html',
                controller: 'NotificationsCtrl'
            });
    }

})();
/*jshint latedef:false*/

//Config - customerConfig

(function() {

    'use strict';

    angular
        .module('whitelabelApp')
        .config(customerConfig);

    customerConfig.$inject = ['$routeProvider'];

    function customerConfig($routeProvider) {

        $routeProvider

            //Create Customer

            .when('/customer/create', {
                requireLogin: true,
                templateUrl: 'customer/create/create-customer.template.html',
                controller: 'CreateCustomerCtrl'
            })

            .when('/customer/create/wholesale', {
                requireLogin: true,
                templateUrl: 'customer/create/wholesale/wholesale.template.html',
                controller: 'WholesaleCtrl'
            })

            .when('/customer/create/retailer', {
                requireLogin: true,
                templateUrl: 'customer/create/retailer/retailer.template.html',
                controller: 'RetailerCtrl'
            });
    }

})();
/*jshint latedef:false*/

//Config - searchConfig

(function () {

    'use strict';

    angular
        .module('whitelabelApp')
        .config(searchConfig);

    searchConfig.$inject = ['$routeProvider'];

    function searchConfig($routeProvider) {

        $routeProvider

        //Search

            .when('/customer/search', {
            requireLogin: true,
            templateUrl: 'customer/search/search.template.html',
            controller: 'SearchCtrl'
        })

        .when('/customer/search/edit', {
            requireLogin: true,
            templateUrl: 'customer/search/search.template.html',
            controller: 'SearchCtrl'
        })

        .when('/customer/search/results', {
            requireLogin: true,
            templateUrl: 'customer/search/results/results.template.html',
            controller: 'ResultsCtrl'
        });
    }

})();

/*jshint latedef:false*/

//Config - CustomerSummaryConfig

(function () {

    'use strict';

    angular
        .module('whitelabelApp')
        .config(CustomerSummaryConfig);

    CustomerSummaryConfig.$inject = ['$routeProvider'];

    function CustomerSummaryConfig($routeProvider) {

        $routeProvider

        //Customer Summary

        .when('/customer/summary/:customerID', {
            requireLogin: true,
            templateUrl: 'customer/summary/summary.template.html',
            controller: 'CustomerSummaryCtrl'
        });
    }

})();

/*jshint latedef:false*/

//Config - formsConfig

(function() {

    'use strict';

    angular
        .module('whitelabelApp')
        .config(formsConfig);

    formsConfig.$inject = ['$routeProvider'];

    function formsConfig($routeProvider) {

        $routeProvider

            //Forms Create

            .when('/forms/create', {
                requireLogin: true,
                roleTypes: ['admin'],
                templateUrl: 'forms/create/create.template.html',
                controller: 'FormsCtrl'
            });
    }

})();
/*jshint latedef:false*/

//Controller - DashboardCtrl

(function () {

    'use strict';

    angular
        .module('whitelabelApp')
        .controller('DashboardCtrl', DashboardCtrl);

    DashboardCtrl.$inject = ['$scope', 'FlashFactory', 'TitleFactory'];

    function DashboardCtrl($scope, FlashFactory, TitleFactory) {

        TitleFactory.setTitle('app.dashboard.name');

        $scope.errors = [];

        var init = function () {};

        init();
    }

})();

/*jshint latedef:false*/

//Controller - LoginCtrl

(function() {

    'use strict';

    angular
        .module('whitelabelApp')
        .controller('LoginCtrl', LoginCtrl);

    LoginCtrl.$inject = ['$scope', '$http', '$location', '$timeout', 'AuthFactory', 'FocusInput', 'TitleFactory'];

    function LoginCtrl($scope, $http, $location, $timeout, AuthFactory, FocusInput, TitleFactory) {

        TitleFactory.setTitle('app.login.name');

        $scope.$on('$viewContentLoaded', function() {
            FocusInput.init('username');
        });

        $scope.hasError = false;

        $scope.login = function() {
            $scope.credentials.message = null;

            if (!$scope.credentials.user || (!$scope.credentials.user.username && !$scope.credentials.user.password)) {
                $scope.errors.push('app.login.field.username.error');
                $scope.errors.push('app.login.field.password.error');
                return;
            } else if (!$scope.credentials.user.username) {
                $scope.errors.push('app.login.field.username.error');
                return;
            } else if (!$scope.credentials.user.password) {
                $scope.errors.push('app.login.field.password.error');
                return;
            }

            $scope.loggingIn = true;
            $scope.errors = [];

            AuthFactory.login($scope.credentials)
                .success(function(data) {
                    console.log(data);
                    if (data.message && data.message.error) {
                        $scope.errors.push('Invalid credentials provided.');
                    } else {
                        AuthFactory.setToken(data.user.authToken);
                        AuthFactory.setRole('admin');
                        AuthFactory.setRemember(true);
                        $timeout(function () {
                            $location.path('/dashboard');
                        });
                    }
                    $scope.loggingIn = false;
                })
                .error(function(data, status) {
                    $scope.loggingIn = false;
                    console.log('AJAX Error in login request: ' + status);
                    $scope.errors.push('Sorry, an error occured while trying to log in.');
                });
        };


    }

})();
/*jshint latedef:false*/

//Controller - NewsCtrl

(function() {

    'use strict';

    angular
        .module('whitelabelApp')
        .controller('NewsCtrl', NewsCtrl);

    NewsCtrl.$inject = ['$scope', '$timeout', 'TitleFactory', 'NewsFactory'];

    function NewsCtrl($scope, $timeout, TitleFactory, NewsFactory) {

        TitleFactory.setTitle('app.news.name');

        $scope.getNews = function() {
            NewsFactory.connect()
                .success(function(data) {
                    $scope.news = data.feed.entries;
                    console.log($scope.news);
                });
        };

        var init = function() {
            $scope.getNews();
        };

        init();

    }

})();

/*jshint latedef:false*/

//Controller - NotificationsCtrl

(function () {

    'use strict';

    angular
        .module('whitelabelApp')
        .controller('NotificationsCtrl', NotificationsCtrl);

    NotificationsCtrl.$inject = ['$scope', '$timeout', 'TitleFactory', 'NotificationsFactory'];

    function NotificationsCtrl($scope, $timeout, TitleFactory, NotificationsFactory) {

        TitleFactory.setTitle('app.notifications.name');

        $scope.doneWorkTask = function (task) {

            $scope.removeFromArray($scope.availableWorkTasks, task);
            // PUT BACK: task
            task.completing = true;
            NotificationsFactory.completed(task.taskProcessInstanceId)
                .success(function () {

                    var compTask = angular.copy(task);
                    compTask.taskStatus = 'Completed';

                    $scope.completedWorkTasks.push(compTask);

                    $scope.updateWorktasks();
                });
        };
    }

})();

/*jshint latedef:false*/

//Controller - CreateCustomerCtrl

(function() {

    'use strict';

    angular
        .module('whitelabelApp')
        .controller('CreateCustomerCtrl', CreateCustomerCtrl);

    CreateCustomerCtrl.$inject = ['$scope', '$filter', 'ReferenceFactory', 'FocusInput', 'TitleFactory'];

    function CreateCustomerCtrl($scope, $filter, ReferenceFactory, FocusInput, TitleFactory) {

        $scope.breadcrumb = 'create';

        $scope.$on('$viewContentLoaded', function() {
            TitleFactory.setTitle('app.create.name');
        });

        $scope.createTypes = [{
            name: $filter('translate')('app.retailer.name'),
            url: 'customer/create/retailer'
        }, {
            name: $filter('translate')('app.wholesale.name'),
            url: 'customer/create/wholesale'
        }];

        $scope.makeDate = function(date) {
            return $filter('date')(date, 'dd/MM/yyyy');
        };

        var init = function() {
            $scope.cvState = 'intro';
            FocusInput.init('formType');
        };

        init();

    }

})();

/*jshint latedef:false*/

//Controller - SearchCtrl

(function() {

    'use strict';

    angular
        .module('whitelabelApp')
        .controller('SearchCtrl', SearchCtrl);

    SearchCtrl.$inject = ['$rootScope', '$scope', '$location', '$timeout', '$filter', '$sce', 'ReferenceFactory', 'SearchFactory', 'GlobalFactory', 'StorageFactory', 'FocusInput', 'FlashFactory', 'TitleFactory'];

    function SearchCtrl($rootScope, $scope, $location, $timeout, $filter, $sce, ReferenceFactory, SearchFactory, GlobalFactory, StorageFactory, FocusInput, FlashFactory, TitleFactory) {

        //Requires Action

        $scope.$on('$viewContentLoaded', function() {
            TitleFactory.setTitle('app.findCustomer.name');
        });

        $scope.state = 'searching';
        $scope.breadcrumb = 'search';

        $scope.query = {};
        $scope.toSubmit = {};


        $scope.optionsDateRangeType = [{
            value: $filter('translate')('app.global.renewal'),
        }, {
            value: $filter('translate')('app.global.activity')
        }];


        $scope.isEditMode = function() {
            if ($location.path() === '/customer/search/edit') {
                if (StorageFactory.getSearchQuery()) {
                    return true;
                }
            }
            return false;
        };

        $scope.getCustomerSource = function() {
            ReferenceFactory.logbookSource()
                .success(function(data) {
                    $scope.sources = $filter('orderBy')(data, 'name');
                });
        };

        $scope.queryExists = function() {
            if ($scope.query) {

                $scope.savedQuery = {};
                angular.copy($scope.query, $scope.savedQuery);

                if ($scope.query.dateFrom) {
                    $scope.toSubmit.dateFrom = $scope.query.dateFrom;
                }
                if ($scope.query.dateTo) {
                    $scope.toSubmit.dateTo = $scope.query.dateTo;
                }
                if ($scope.query.msgType) {
                    $scope.toSubmit.msgType = $scope.query.msgType.value;
                }
                if ($scope.query.retailerName) {
                    $scope.toSubmit.retailerName = $scope.query.retailerName;
                }
                if ($scope.query.retailerAddress) {
                    $scope.toSubmit.retailerAddress = $scope.query.retailerAddress;
                }

                if ($scope.query.customerNumber) {
                    $scope.toSubmit.customerNumber = $scope.query.customerNumber;
                }

                for (var property in $scope.toSubmit) {

                    if ($scope.toSubmit[property] && ($scope.toSubmit[property].length || typeof $scope.toSubmit[property].getMonth === 'function')) {
                        return true;
                    }
                }
            }

            $scope.clearForm(true);
            $scope.errors.push('You must enter at least one valid search criteria.');
            return false;
        };

        $scope.checkRequiredDate = function(dateType) {

            var result = false;

            if (!$scope.query.customerNumber) {
                if (dateType === 'to') {
                    if (!$scope.query.dateTo) {
                        result = true;
                    }
                }
                if (dateType === 'from') {
                    if (!$scope.query.dateFrom) {
                        result = true;
                    }
                }
            }

            return result;

        };

        $scope.queryDatesValid = function() {
            var result = true;
            if (!$scope.query.customerNumber) {
                if (!GlobalFactory.dateValid($scope.query.dateFrom)) {
                    if (!$scope.query.dateTo) {
                        $scope.errors.push('Your Date From entry is not valid.');
                        result = false;
                    }
                }
                if (!GlobalFactory.dateValid($scope.query.dateTo)) {
                    if (!$scope.query.dateFrom) {
                        $scope.errors.push('Your Date To entry is not valid.');
                        result = false;
                    }
                }
            }
            return result;
        };

        $scope.search = function() {
            $scope.errors = [];
            if ($scope.queryDatesValid()) {

                if ($scope.queryExists()) {

                    $scope.state = 'searching';

                    $scope.toSubmit.dateFrom = GlobalFactory.setAsDate($scope.toSubmit.dateFrom, '00:00');
                    $scope.toSubmit.dateTo = GlobalFactory.setAsDate($scope.toSubmit.dateTo, '23:59');

                    SearchFactory.customers($scope.toSubmit)
                        .success(function(data) {
                            StorageFactory.setSearchQuery($scope.savedQuery);
                            StorageFactory.setSearchResults(data);
                            $timeout(function() {
                                $location.path('/customer/search/results');
                            });
                        })
                        .error(function(data, status) {
                            console.log('AJAX Error in search request: ' + status);
                            $scope.state = 'search';
                            $scope.messages = FlashFactory.pushMessage($scope.messages, 'error', 240, null, 'An error occured attempting to perform your search.');
                        });
                }
            }

        };

        $scope.clearForm = function(show) {
            $scope.query = {};
            StorageFactory.removeSearchQuery();
            if (!show) {
                $scope.errors = {};
            }
        };

        var init = function() {
            $scope.state = 'search';
            FocusInput.init('retailerName');
            $scope.errors = [];

            if ($scope.isEditMode()) {
                $scope.query = StorageFactory.getSearchQuery();
            }
        };

        init();
    }

})();

/*jshint latedef:false*/

//Controller - CustomerSummaryCtrl
(function() {

    'use strict';

    angular.module('whitelabelApp').controller('CustomerSummaryCtrl',
        CustomerSummaryCtrl);

    CustomerSummaryCtrl.$inject = ['$scope', '$location', '$filter', '$sce', '$routeParams', '$timeout', '$moment', 'StorageFactory', 'ReferenceFactory', 'SearchFactory', 'GlobalFactory', 'FlashFactory', 'TitleFactory'];

    function CustomerSummaryCtrl($scope, $location, $filter, $sce, $routeParams, $timeout, $moment, StorageFactory, ReferenceFactory, SearchFactory, GlobalFactory, FlashFactory, TitleFactory) {


        $scope.transMethods = ['Telephone', 'Paper'];

        $scope.hint = $filter('translate')('app.global.all');
        $scope.hintSelect = $filter('translate')('app.global.select');

      
        /* END Config Sales Note */


        $scope.getIconType = function(type) {
            var icon;
            if (type === 'Telephone') {
                icon = 'phone';
            }
            if (type === 'Paper') {
                icon = 'pencil';
            }
            if (type === 'XML') {
                icon = 'wifi';
            }
            return icon;
        };


        $scope.loadCustomer = function() {

            if ($scope.customerID) {

                SearchFactory.customersSummary($scope.customerID)
                    .success(
                        function(data) {

                            $scope.customer = data;

                            console.log($scope.customer);

                            TitleFactory.setTitle('app.customerSummary.name');
                            TitleFactory.setSubTitle('- ' + $scope.customerID);
                        })
                    .error(
                        function() {

                            $scope.messages = FlashFactory.pushMessage($scope.messages, 'error', 240, null, 'The customer you are looking for could not be found.');

                            if (StorageFactory.getSearchResults()) {
                                $location.path('/customer/search/results');
                            } else {
                                $location.path('/customer/search');
                            }
                        });
            } else {
                $location.path('/customer/search');
            }
        };


        var init = function() {

            $scope.customerID = $routeParams.customerID;
            $scope.breadcrumb = 'customer';

            $scope.loadCustomer();

        };

        init();

    }

})();

/*jshint latedef:false*/

//Controller - FormsCtrl

(function () {

    'use strict';

    angular
        .module('whitelabelApp')
        .controller('FormsCtrl', FormsCtrl);

    FormsCtrl.$inject = ['$scope', '$location', '$timeout', '$filter', 'FormsFactory', 'GlobalFactory', 'FlashFactory', 'FocusInput', 'TitleFactory'];

    function FormsCtrl($scope, $location, $timeout, $filter, FormsFactory, GlobalFactory, FlashFactory, FocusInput, TitleFactory) {

        $scope.loading = false;

        $scope.$on('$viewContentLoaded', function () {
            TitleFactory.setTitle('app.forms.name');
            $scope.fmcType = 'app.forms.name';
        });

        $scope.getForm = function (id) {
            FormsFactory.getForm(id)
                .success(function (data) {
                    $scope.genForm = data;
                });
        };

        $scope.parseEntry = function () {

            $scope.genForm = $scope.textForm;

            console.log($scope.genForm);

            $timeout(function () {
                $scope.$apply();
            });
        };

        var init = function () {
            $scope.getForm('1');
        };

        init();

    }

})();

/*jshint latedef:false*/

//Controller - RetailerCtrl

(function() {

    'use strict';

    angular
        .module('whitelabelApp')
        .controller('RetailerCtrl', RetailerCtrl);

    RetailerCtrl.$inject = ['$scope', '$location', '$timeout', '$filter', 'SaveFormsFactory', 'GlobalFactory', 'FlashFactory', 'FocusInput', 'TitleFactory'];

    function RetailerCtrl($scope, $location, $timeout, $filter, SaveFormsFactory, GlobalFactory, FlashFactory, FocusInput, TitleFactory) {

        $scope.cvState = 'intro';
        $scope.loading = false;

        $scope.$on('$viewContentLoaded', function() {
            TitleFactory.setTitle('app.retailer.name');
            $scope.fmcType = 'app.retailer.name';
        });


        $scope.makeDate = function(date) {
            return $filter('date')(date, $scope.dateStyle);
        };

        //Paper functions
        $scope.entry = {
            'dates': [{}]
        };

        $scope.newMinDate = new Date();

        $scope.validCustomer = true;

        $scope.removeDelete = true;

        $scope.completedSteps = [];

        $scope.discard = function() {
            return 'customer/create';
        };

        $scope.updateStep = function(step) {
            GlobalFactory.updateStep($scope.completedSteps, step);
        };

        $scope.showStep = function(step) {
            if (GlobalFactory.showStep($scope.completedSteps, step)) {
                $scope.currentStep = step;
            }
        };

        $scope.getPrevDate = function(index) {

            index = index - 1;
            if (index > -1) {
                var ts = GlobalFactory.setAsDate($scope.entry.dates[index].date);

                var date = new Date(ts);
                var now = new Date(GlobalFactory.flipDate($scope.entry.renewalDate));

                var checkDate = new Date(date).setHours(0, 0, 0, 0);
                var checkNow = new Date(now).setHours(0, 0, 0, 0);

                if (checkDate < checkNow) {
                    date.setDate(date.getDate() + 1);
                }
                return $filter('date')(date, 'dd/MM/yyyy');
            }
        };

        $scope.addDate = function() {

            $('.collapsible-item.ng-isolate-scope.open').addClass('dirty');

            var date = {
                'date': $scope.getPrevDate($scope.entry.dates.length)
            };

            $scope.entry.dates.push(date);

            $timeout(function() {
                $('.collapsible-item.open .title').trigger('click').trigger('click').removeClass('dirty');
                FocusInput.init('date' + $scope.entry.dates.length);

            }, 200);

        };

        $scope.visiblePDate = $scope.entry.dates[0];

        $scope.setVisiblePDate = function(date) {
            $scope.visiblePDate = date;
        };

        $scope.step1Valid = function() {

            if (!$scope.entry) {
                return false;
            }
            var valid = true;

            if (!$scope.entry.customerNumberPrimary) {
                $scope.errors.push('You have not provided a primary customer number.');
                valid = false;
            }

            if (!$scope.entry.retailerName) {
                $scope.errors.push('You have not provided a retailer name.');
                valid = false;
            }

            if (!$scope.entry.retailerAddress) {
                $scope.errors.push('You have not provided a retailer address.');
                valid = false;
            }

            return valid;

        };

        $scope.step1Done = function() {
            $scope.errors = [];
            if (!$scope.step1Valid()) {
                return false;
            }
            $scope.updateStep(1);
            $scope.currentStep = 2;
            FocusInput.init('date100');
            $scope.toTheTop();
            return true;
        };

        $scope.$watchGroup(['entry.activityDate', 'entry.activityTime'], function(newValues) {
            if (newValues[0] && newValues[0].length === 10) {
                $scope.newMinDate = Date.parse(GlobalFactory.flipDate(newValues[0]));
            }
            if (newValues[1] && $scope.entry.activityDate) {

                if (newValues[1].length === 5) {
                    var result = GlobalFactory.setAsDate(newValues[0], newValues[1]);
                    $scope.newMinDate = Date.parse(result);
                }
            }
        }, true);

        $scope.step2Valid = function() {
            if (!$scope.entry) {
                return false;
            }

            var valid = true;

            var aDate = $scope.checkValidDate($scope.entry.activityDate);
            var aTime = $scope.checkValidTime($scope.entry.activityDate, $scope.entry.activityTime);

            if (!$scope.entry.activityDate || !aDate) {
                $scope.errors.push('You have an activity date that is not valid.');
                valid = false;
            } else {
                if (aDate === 'past') {
                    $scope.errors.push('You have an activity date too far in the past.');
                    valid = false;
                }
                if (aDate === 'future') {
                    $scope.errors.push('You have an activity date too far in the future.');
                    valid = false;
                }
            }

            if (!$scope.entry.activityTime || !aTime) {
                $scope.errors.push('You have an activity time that is not valid.');
                valid = false;
            } else {
                if (aTime === 'past') {
                    $scope.errors.push('You have an activity time too far in the past.');
                    valid = false;
                }
                if (aTime === 'future') {
                    $scope.errors.push('You have an activity time too far in the future.');
                    valid = false;
                }
            }


            var bDate = $scope.checkValidDate($scope.entry.renewalDate, $scope.newMinDate);
            var bTime = $scope.checkValidTime($scope.entry.renewalDate, $scope.entry.renewalTime, $scope.newMinDate);

            if (!$scope.entry.renewalDate || !bDate) {
                $scope.errors.push('You have a renewal date that is not valid.');
                valid = false;
            } else {
                if (bDate === 'past') {
                    $scope.errors.push('You have a renewal date too far in the past.');
                    valid = false;
                }
                if (bDate === 'future') {
                    $scope.errors.push('You have a renewal date too far in the future.');
                    valid = false;
                }
            }

            if (!$scope.entry.renewalTime || !bTime) {
                $scope.errors.push('You have a renewal time that is not valid.');
                valid = false;
            } else {
                if (bTime === 'past') {
                    $scope.errors.push('You have a renewal time too far in the past.');
                    valid = false;
                }
                if (bTime === 'future') {
                    $scope.errors.push('You have a renewal time too far in the future.');
                    valid = false;
                }
            }

            return valid;
        };

        $scope.step2Done = function() {

            $scope.errors = [];
            if (!$scope.step2Valid()) {
                return false;
            }

            $scope.updateStep(2);
            $scope.currentStep = 3;
            FocusInput.init('date0');
            $scope.entry.dates[0].date = $scope.makeDate($scope.entry.activityDate);
            $scope.toTheTop();

            return true;
        };

        $scope.step3Valid = function(array, stepCheck) {
            if (!array) {
                return false;
            }
            var valid = true;
            var step = 0;
            var stepErrors = [];

            for (var i in array) {
                step++;
                var date = array[i];

                if (!$scope.checkValidDate(date.date)) {
                    stepErrors.push('You have an activity date that is not valid.');
                    valid = false;
                } else {
                    if ($scope.checkValidDate(date.date) === 'past') {
                        stepErrors.push('You have an activity date too far in the past.');
                        valid = false;
                    }
                    if ($scope.checkValidDate(date.date) === 'future') {
                        stepErrors.push('You have an activity date too far in the future.');
                        valid = false;
                    }
                }

                if (!date.contractLength) {
                    stepErrors.push('You have not provided deployment duration.');
                    valid = false;
                }

                if (!date.numberOfEmployees) {
                    stepErrors.push('You have not provided number of operations.');
                    valid = false;
                }

                if (!stepCheck) {
                    stepErrors = _.uniqWith(stepErrors, _.isEqual);
                    for (var e in stepErrors) {
                        $scope.errors.push('Activity ' + step + ': ' + stepErrors[e]);
                    }
                }

                date.isValid = valid;
            }

            return valid;
        };

        $scope.step3Done = function() {
            $scope.errors = [];

            if (!$scope.step3Valid($scope.entry.dates)) {
                return false;
            }

            $scope.updateStep(3);
            $scope.currentStep = 4;
            $scope.toTheTop();
            FocusInput.init('submitForm');

        };

        $scope.submitForm = function() {

            var newRenewalDate = GlobalFactory.setAsDate($scope.entry.renewalDate, $scope.entry.renewalTime);
            var newDepartureDate = GlobalFactory.setAsDate($scope.entry.activityDate, $scope.entry.activityTime);

            var toSubmit = {
                retailerName: $scope.entry.retailerName,
                retailerAddress: $scope.entry.retailerAddress,
                activityDate: newDepartureDate,
                renewalDate: newRenewalDate,
                activities: [],
                customerNumbers: {
                    primaryCustomerNumber: $scope.entry.customerNumberPrimary,
                    alternativeCustomerNumber: $scope.entry.customerNumberAlt
                }
            };

            for (var a in $scope.entry.dates) {

                var date = $scope.entry.dates[a];

                var dateToAdd = {
                    'whenCarriedOut': GlobalFactory.setAsDate(date.date),
                    'ras': [{
                        'contractLength': date.contractLength,
                        'numberOfEmployees': date.numberOfEmployees,
                        'fishingActivitySpecies': [],
                    }]
                };

                toSubmit.activities.push(dateToAdd);
            }

            $scope.loading = true;

            SaveFormsFactory.customer(toSubmit)
                .success(function(data) {

                    var lbNumber = data.customernumber;

                    $scope.loading = false;

                    // Message: Success

                    $scope.messages = FlashFactory.pushMessage($scope.messages, 'success', 90, null, 'app.retailer.message.success', 'customer/summary/' + lbNumber, 'View Customer');

                    // Message: Warnings

                    if (data && data.warnings) {
                        $scope.messages = FlashFactory.pushMessage($scope.messages, 'warning', 120, data.warnings);
                    }

                    $scope.entry = {
                        'dates': [{}]
                    };
                    $scope.cvState = 'intro';

                    $timeout(function() {
                        $location.path('/customer/create');
                    });
                })
                .error(function(data) {
                    $scope.loading = false;
                    $scope.clState = 'review';

                    // Message: Errors

                    var the_errors = null;

                    if (data && data.errors) {
                        the_errors = data.errors;
                    }
                    $scope.messages = FlashFactory.pushMessage($scope.messages, 'error', 240, the_errors, 'app.retailer.message.error');
                });
        };

        var init = function() {
            $scope.cvState = 'intro';
            $scope.currentStep = 1;
            FocusInput.init('customerNumberPrimary');
        };

        init();

    }

})();

/*jshint latedef:false*/

//Controller - WholesaleCtrl

(function() {

    'use strict';

    angular
        .module('whitelabelApp')
        .controller('WholesaleCtrl', WholesaleCtrl);

    WholesaleCtrl.$inject = ['$scope', '$location', '$timeout', '$filter', 'SaveFormsFactory', 'GlobalFactory', 'FlashFactory', 'FocusInput', 'TitleFactory'];

    function WholesaleCtrl($scope, $location, $timeout, $filter, SaveFormsFactory, GlobalFactory, FlashFactory, FocusInput, TitleFactory) {

        $scope.cvState = 'intro';
        $scope.loading = false;

        $scope.$on('$viewContentLoaded', function() {
            TitleFactory.setTitle('app.wholesale.name');
            $scope.fmcType = 'app.wholesale.name';
        });


        $scope.makeDate = function(date) {
            return $filter('date')(date, $scope.dateStyle);
        };

        //Paper functions
        $scope.entry = {
            'dates': [{}]
        };

        $scope.newMinDate = new Date();

        $scope.validCustomer = true;

        $scope.removeDelete = true;

        $scope.completedSteps = [];

        $scope.discard = function() {
            return 'customer/create';
        };

        $scope.updateStep = function(step) {
            GlobalFactory.updateStep($scope.completedSteps, step);
        };

        $scope.showStep = function(step) {
            if (GlobalFactory.showStep($scope.completedSteps, step)) {
                $scope.currentStep = step;
            }
        };

        $scope.getPrevDate = function(index) {

            index = index - 1;
            if (index > -1) {
                var ts = GlobalFactory.setAsDate($scope.entry.dates[index].date);

                var date = new Date(ts);
                var now = new Date(GlobalFactory.flipDate($scope.entry.renewalDate));

                var checkDate = new Date(date).setHours(0, 0, 0, 0);
                var checkNow = new Date(now).setHours(0, 0, 0, 0);

                if (checkDate < checkNow) {
                    date.setDate(date.getDate() + 1);
                }
                return $filter('date')(date, 'dd/MM/yyyy');
            }
        };

        $scope.addDate = function() {

            $('.collapsible-item.ng-isolate-scope.open').addClass('dirty');

            var date = {
                'date': $scope.getPrevDate($scope.entry.dates.length)
            };

            $scope.entry.dates.push(date);

            $timeout(function() {
                $('.collapsible-item.open .title').trigger('click').trigger('click').removeClass('dirty');
                FocusInput.init('date' + $scope.entry.dates.length);

            }, 200);

        };

        $scope.visiblePDate = $scope.entry.dates[0];

        $scope.setVisiblePDate = function(date) {
            $scope.visiblePDate = date;
        };

        $scope.step1Valid = function() {

            if (!$scope.entry) {
                return false;
            }
            var valid = true;

            if (!$scope.entry.customerNumberPrimary) {
                $scope.errors.push('You have not provided a primary wholesaler number.');
                valid = false;
            }

            if (!$scope.entry.wholesaleName) {
                $scope.errors.push('You have not provided a wholesaler name.');
                valid = false;
            }

            if (!$scope.entry.wholesaleAddress) {
                $scope.errors.push('You have not provided a wholesaler address.');
                valid = false;
            }

            return valid;

        };

        $scope.step1Done = function() {
            $scope.errors = [];
            if (!$scope.step1Valid()) {
                return false;
            }
            $scope.updateStep(1);
            $scope.currentStep = 2;
            FocusInput.init('date100');
            $scope.toTheTop();
            return true;
        };

        $scope.$watchGroup(['entry.activityDate', 'entry.activityTime'], function(newValues) {
            if (newValues[0] && newValues[0].length === 10) {
                $scope.newMinDate = Date.parse(GlobalFactory.flipDate(newValues[0]));
            }
            if (newValues[1] && $scope.entry.activityDate) {

                if (newValues[1].length === 5) {
                    var result = GlobalFactory.setAsDate(newValues[0], newValues[1]);
                    $scope.newMinDate = Date.parse(result);
                }
            }
        }, true);

        $scope.step2Valid = function() {
            if (!$scope.entry) {
                return false;
            }

            var valid = true;

            var aDate = $scope.checkValidDate($scope.entry.activityDate);
            var aTime = $scope.checkValidTime($scope.entry.activityDate, $scope.entry.activityTime);

            if (!$scope.entry.activityDate || !aDate) {
                $scope.errors.push('You have an activity date that is not valid.');
                valid = false;
            } else {
                if (aDate === 'past') {
                    $scope.errors.push('You have an activity date too far in the past.');
                    valid = false;
                }
                if (aDate === 'future') {
                    $scope.errors.push('You have an activity date too far in the future.');
                    valid = false;
                }
            }

            if (!$scope.entry.activityTime || !aTime) {
                $scope.errors.push('You have an activity time that is not valid.');
                valid = false;
            } else {
                if (aTime === 'past') {
                    $scope.errors.push('You have an activity time too far in the past.');
                    valid = false;
                }
                if (aTime === 'future') {
                    $scope.errors.push('You have an activity time too far in the future.');
                    valid = false;
                }
            }


            var bDate = $scope.checkValidDate($scope.entry.renewalDate, $scope.newMinDate);
            var bTime = $scope.checkValidTime($scope.entry.renewalDate, $scope.entry.renewalTime, $scope.newMinDate);

            if (!$scope.entry.renewalDate || !bDate) {
                $scope.errors.push('You have a renewal date that is not valid.');
                valid = false;
            } else {
                if (bDate === 'past') {
                    $scope.errors.push('You have a renewal date too far in the past.');
                    valid = false;
                }
                if (bDate === 'future') {
                    $scope.errors.push('You have a renewal date too far in the future.');
                    valid = false;
                }
            }

            if (!$scope.entry.renewalTime || !bTime) {
                $scope.errors.push('You have a renewal time that is not valid.');
                valid = false;
            } else {
                if (bTime === 'past') {
                    $scope.errors.push('You have a renewal time too far in the past.');
                    valid = false;
                }
                if (bTime === 'future') {
                    $scope.errors.push('You have a renewal time too far in the future.');
                    valid = false;
                }
            }

            return valid;
        };

        $scope.step2Done = function() {

            $scope.errors = [];
            if (!$scope.step2Valid()) {
                return false;
            }

            $scope.updateStep(2);
            $scope.currentStep = 3;
            FocusInput.init('date0');
            $scope.entry.dates[0].date = $scope.makeDate($scope.entry.activityDate);
            $scope.toTheTop();

            return true;
        };

        $scope.step3Valid = function(array, stepCheck) {
            if (!array) {
                return false;
            }
            var valid = true;
            var step = 0;
            var stepErrors = [];

            for (var i in array) {
                step++;
                var date = array[i];

                if (!$scope.checkValidDate(date.date)) {
                    stepErrors.push('You have an activity date that is not valid.');
                    valid = false;
                } else {
                    if ($scope.checkValidDate(date.date) === 'past') {
                        stepErrors.push('You have an activity date too far in the past.');
                        valid = false;
                    }
                    if ($scope.checkValidDate(date.date) === 'future') {
                        stepErrors.push('You have an activity date too far in the future.');
                        valid = false;
                    }
                }

                if (!date.contractLength) {
                    stepErrors.push('You have not provided deployment duration.');
                    valid = false;
                }

                if (!date.numberOfEmployees) {
                    stepErrors.push('You have not provided number of operations.');
                    valid = false;
                }

                if (!stepCheck) {
                    stepErrors = _.uniqWith(stepErrors, _.isEqual);
                    for (var e in stepErrors) {
                        $scope.errors.push('Activity ' + step + ': ' + stepErrors[e]);
                    }
                }

                date.isValid = valid;
            }

            return valid;
        };

        $scope.step3Done = function() {
            $scope.errors = [];

            if (!$scope.step3Valid($scope.entry.dates)) {
                return false;
            }

            $scope.updateStep(3);
            $scope.currentStep = 4;
            $scope.toTheTop();
            FocusInput.init('submitForm');

        };

        $scope.submitForm = function() {

            var newRenewalDate = GlobalFactory.setAsDate($scope.entry.renewalDate, $scope.entry.renewalTime);
            var newDepartureDate = GlobalFactory.setAsDate($scope.entry.activityDate, $scope.entry.activityTime);

            var toSubmit = {
                wholesaleName: $scope.entry.wholesaleName,
                wholesaleAddress: $scope.entry.wholesaleAddress,
                activityDate: newDepartureDate,
                renewalDate: newRenewalDate,
                activities: [],
                customerNumbers: {
                    primaryCustomerNumber: $scope.entry.customerNumberPrimary,
                    alternativeCustomerNumber: $scope.entry.customerNumberAlt
                }
            };

            for (var a in $scope.entry.dates) {

                var date = $scope.entry.dates[a];

                var dateToAdd = {
                    'whenCarriedOut': GlobalFactory.setAsDate(date.date),
                    'ras': [{
                        'contractLength': date.contractLength,
                        'numberOfEmployees': date.numberOfEmployees,
                        'fishingActivitySpecies': [],
                    }]
                };

                toSubmit.activities.push(dateToAdd);
            }

            $scope.loading = true;

            SaveFormsFactory.customer(toSubmit)
                .success(function(data) {

                    var lbNumber = data.customernumber;

                    $scope.loading = false;

                    // Message: Success

                    $scope.messages = FlashFactory.pushMessage($scope.messages, 'success', 90, null, 'app.wholesale.message.success', 'customer/summary/' + lbNumber, 'View Customer');

                    // Message: Warnings

                    if (data && data.warnings) {
                        $scope.messages = FlashFactory.pushMessage($scope.messages, 'warning', 120, data.warnings);
                    }

                    $scope.entry = {
                        'dates': [{}]
                    };
                    $scope.cvState = 'intro';

                    $timeout(function() {
                        $location.path('/customer/create');
                    });
                })
                .error(function(data) {
                    $scope.loading = false;
                    $scope.clState = 'review';

                    // Message: Errors

                    var the_errors = null;

                    if (data && data.errors) {
                        the_errors = data.errors;
                    }
                    $scope.messages = FlashFactory.pushMessage($scope.messages, 'error', 240, the_errors, 'app.wholesale.message.error');
                });
        };

        var init = function() {
            $scope.cvState = 'intro';
            $scope.currentStep = 1;
            FocusInput.init('customerNumberPrimary');
        };

        init();

    }

})();

/*jshint latedef:false*/

//Controller - ResultsCtrl

(function() {

    'use strict';

    angular
        .module('whitelabelApp')
        .controller('ResultsCtrl', ResultsCtrl);

    ResultsCtrl.$inject = ['$scope', '$location', 'SearchFactory', 'StorageFactory', 'TitleFactory'];

    function ResultsCtrl($scope, $location, SearchFactory, StorageFactory, TitleFactory) {

        $scope.query = {};

        $scope.$on('$viewContentLoaded', function() {
            TitleFactory.setTitle('app.customerResults.name');
        });

        $scope.breadcrumb = 'results';

        $scope.transMethods = ['Telephone', 'Paper'];

        $scope.viewCustomer = function(logbook) {

            $location.path('/customer/summary/' + logbook);

        };

        var prog = 20;

        $scope.loadMore = function() {
            $scope.count = $scope.count + prog;
        };

        $scope.orderResults = function($event, type) {
            var obj;
            var sort;

            if ($event) {
                obj = $($event.target);
            } else {
                obj = $('.order-default');
            }

            obj.siblings('td').removeClass('asc').removeClass('desc');

            if (obj.hasClass('asc')) {
                obj.removeClass('asc');
                obj.addClass('desc');
                sort = '';
            } else {
                sort = '-';
                obj.addClass('asc');
                obj.removeClass('desc');
            }

            $scope.resultsType = sort + type;
        };

        $scope.getIconType = function(type) {
            var icon;
            if (type === 'Telephone') {
                icon = 'phone';
            }
            if (type === 'Paper') {
                icon = 'pencil';
            }
            return icon;
        };

        var init = function() {

            $scope.results = _.compact(StorageFactory.getSearchResults());

            var uniqueList = _.uniq($scope.results, function(item) {
                return item.logbookNo;
            });

            $scope.results = uniqueList;

            $scope.resultsAll = null;

            if ($scope.results) {
                $scope.resultsAll = $scope.results.length;
            }
            $scope.count = 0;

            $scope.orderResults(false, 'activityDate');

            console.log($scope.results);

            if ($scope.resultsAll > $scope.count) {
                $scope.loadMore();
            }
        };

        init();

    }

})();

/*jshint latedef:false*/

//Factory - ApiUrl

(function() {
    /*jshint latedef:false*/
    /*jshint -W004 */

    'use strict';

    angular
        .module('app.service.api', [])
        .factory('ApiUrl', ApiUrl);

    function ApiUrl() {

        var ApiUrl = {};

        ApiUrl.connect = function() {

            var apiPath = '/api/';

            // External JAVA API endpoint - Use once in a Java Application
            //var apiPath = 'http://localhost:8080/webapp/api/';

            apiPath = '/api/';
            return apiPath;
        };

        return ApiUrl;
    }
})();

/*jshint latedef:false*/

//Factory - AuthFactory

(function() {
    /*jshint -W004 */

    'use strict';

    angular
        .module('app.service.auth', [
            'app.service.api',
            'LocalStorageModule',
            'ab-base64',
        ])
        .factory('AuthFactory', AuthFactory);

    AuthFactory.$inject = ['$http', '$location', '$rootScope', '$timeout', '$window', 'ApiUrl', 'base64', 'localStorageService'];

    function AuthFactory($http, $location, $rootScope, $timeout, $window, ApiUrl, base64, localStorageService) {

        var AuthFactory = {};
        AuthFactory.loggedIn = false;
        var poe = 'auth';

        //  Login

        AuthFactory.login = function() {

            // return $http({
            //     method: 'POST',
            //     url: ApiUrl.connect() + poe + '/login',
            //     headers: {},
            //     data: angular.toJson(data)
            // });
            return $http.get(ApiUrl.connect() + poe + '/login', {});

        };

        // Token Handlers

        AuthFactory.checkToken = function() {

            //Set logged out as false by default

            AuthFactory.loggedIn = false;

            if (AuthFactory.getRemember() && localStorageService.get('token')) {

                AuthFactory.loggedIn = true;

            } else {

                if ($rootScope.token) {
                    AuthFactory.loggedIn = true;
                }
            }
            return AuthFactory.loggedIn;
        };

        AuthFactory.getToken = function() {

            if (localStorageService.get('token')) {

                return base64.decode(localStorageService.get('token'));

            } else {

                if ($rootScope.token) {
                    return base64.decode($rootScope.token);
                }
            }
        };

        AuthFactory.setToken = function(token) {

            if (token) {

                //Check if remember token is set, if so set bearer token in local storage

                if (AuthFactory.getRemember()) {
                    localStorageService.set('token', base64.encode(token));
                } else {
                    $rootScope.token = base64.encode(token);
                }
            }
        };

        AuthFactory.removeToken = function() {

            $rootScope.token = null;

            //Check if remember token is set, if so set bearer token in local storage

            if (AuthFactory.getRemember() && localStorageService.get('token')) {
                localStorageService.remove('token');
            }

        };

        // Remember Token Handlers

        AuthFactory.getRemember = function() {

            if (localStorageService.get('remember_me')) {
                return localStorageService.get('remember_me');
            }
        };

        AuthFactory.setRemember = function(remember_me) {

            if (remember_me === true) {
                localStorageService.set('remember_me', remember_me);
            } else {
                AuthFactory.removeRemember();
            }
        };

        AuthFactory.removeRemember = function() {

            localStorageService.remove('remember_me');
        };

        // Remember Role Handlers

        AuthFactory.getRole = function() {

            if (localStorageService.get('lvl')) {
                return localStorageService.get('lvl');
            }
        };

        AuthFactory.setRole = function(lvl) {

            if (lvl) {
                localStorageService.set('lvl', lvl);
            } else {
                AuthFactory.removeRole();
            }
        };

        AuthFactory.removeRole = function() {

            localStorageService.remove('lvl');
        };

        // Logout

        AuthFactory.clearData = function() {
            AuthFactory.removeToken();
            AuthFactory.removeRemember();
            AuthFactory.removeRole();
            // UserFactory.removeAvatar();
            // UserFactory.removeUsername();
            // UserFactory.removeEmail();
        };

        AuthFactory.logout = function() {

            AuthFactory.clearData();
            $timeout(function() {
                $window.location.href = '/webapp/?GLO=true';
            }, 600);
        };

        return AuthFactory;
    }
})();

/*jshint latedef:false*/

//Factory - FlashFactory

(function () {
    /*jshint -W004 */

    'use strict';

    angular
        .module('app.service.flash', [
            'LocalStorageModule'
        ])
        .factory('FlashFactory', FlashFactory);

    FlashFactory.$inject = [];

    function FlashFactory() {

        var FlashFactory = {};

        // Flash Flash

        FlashFactory.pushMessage = function (messages, type, count, array, message, link, linkText) {

            if (array) {
                for (var e = 0; e < array.length; e++) {
                    if (array[e].code) {

                        messages.push({
                            'type': type,
                            'dismiss': false,
                            'count': count,
                            'countCopy': count,
                            'percent': 100,
                            'message': array[e].message,
                            'link': link,
                            'linkText': linkText
                        });
                    }
                }
            } else {
                messages.push({
                    'type': type,
                    'dismiss': false,
                    'count': count,
                    'countCopy': count,
                    'percent': 100,
                    'message': message,
                    'link': link,
                    'linkText': linkText
                });
            }

            return messages;
        };

        return FlashFactory;
    }
})();

/*jshint latedef:false*/

//Factory - FocusInput

(function() {
    /*jshint -W004 */

    'use strict';

    angular
        .module('app.service.focus', [])
        .factory('FocusInput', FocusInput);

    FocusInput.$inject = ['$timeout'];

    function FocusInput($timeout) {

        var FocusInput = {};

        FocusInput.init = function(id, dd) {

            return $timeout(function() {
                var element = document.getElementById(id);
                if (dd) {
                    $(element).find('.selectize-input').trigger('click');
                } else if (element) {
                    element.focus();
                }
            }, 2000);
        };

        return FocusInput;

    }

})();

/*jshint latedef:false*/

//Factory - FormsFactory

(function() {
    /*jshint -W004 */

    'use strict';

    angular
        .module('app.service.forms', [
            'app.service.api'
        ])
        .factory('FormsFactory', FormsFactory);

    FormsFactory.$inject = ['$http', '$location', 'ApiUrl'];

    function FormsFactory($http, $location, ApiUrl) {

        var FormsFactory = {};
        var poe = 'forms';

        // Example Get Request

        FormsFactory.getForm = function(id) {

            return $http.get(ApiUrl.connect() + poe + '/' + id, {});
        };

        return FormsFactory;
    }
})();

/*jshint latedef:false*/

//Factory - GlobalFactory

(function() {
    /*jshint -W004 */

    'use strict';

    angular
        .module('app.service.global', [])
        .factory('GlobalFactory', GlobalFactory);

    GlobalFactory.$inject = ['$filter', '$moment'];

    function GlobalFactory($filter, $moment) {

        var GlobalFactory = {};

        // Flip Date 

        GlobalFactory.flipDate = function(date) {
            if (date.length === 10) {
                var BDate = date.split(/\//);
                var ADate = [BDate[1], BDate[0], BDate[2]].join('/');
                date = new Date(ADate);
                return date;
            }
        };

        //  Date Valid

        /**
        * Service - Date Valid - Initial validation checks whether the date exists along with valid date pattern. Will return a boolean value based on the validity of the date value. 
        * @param {String} date Date string.
        * @param {String} time Time string.
        * @param {String} check Check string.
        * @param {String} minimum date string.        
        * @param {Boolean} allowFuture Determines whether or not a future date is allowed.
        * @returns {Boolean} Will return false if the length of the string is less than 10.
        */

        GlobalFactory.dateValid = function (date, time, check, minimum, allowFuture) {

            var datePattern = 'DD-MM-YYYY';

            var now = $moment();

            if (date && $moment(date, datePattern).isValid()) {

                if (date.length < 10) {
                    return false;
                }

                date = $moment(date, datePattern);

                if (check) {
                    if (time) {
                        time = $moment.utc(time, 'HH:mm');
                        if (!date) {
                            date = $moment.utc('01/01/1970', datePattern);
                        }
                        if (date && $moment.utc(date, datePattern).isValid()) {
                            date.hour(time.get('hour')).minute(time.get('minute'));
                        }
                    } else {
                        return false;
                    }
                } else if (minimum && !check && !time) {

                    var copy_time = new Date($moment(date, datePattern));
                    var copy_minimum_time = new Date(minimum);

                    if (copy_time.setHours(0, 0, 0, 0) === copy_minimum_time.setHours(0, 0, 0, 0)) {
                        var inter = new Date(minimum);
                        date.hour(inter.getHours());
                        date.minute(inter.getMinutes());
                        date.second(inter.getSeconds());
                    }
                }

                if (date) {
                    if (date <= now) {
                        if (minimum) {
                            if (date >= minimum) {
                                return true;
                            } else {
                                return 'past';
                            }
                        }
                        return true;

                    } else {

                        if (allowFuture) {
                            var futureDate = now.add(allowFuture, 'days');
                            if (date < futureDate) {
                                return true;
                            }
                        }
                        if (!date) {
                            return false;
                        }
                        return 'future';
                    }
                }
            }
            return false;
        };

        // Remove from Array

        GlobalFactory.removeFromArray = function(array, item) {

            while (1 === 1) {
                var index = array.lastIndexOf(item);
                if (index >= 0) {
                    array.splice(index, 1);
                } else {
                    break;
                }
            }
        };

        // Remove by attribute

        GlobalFactory.removeByAttribute = function(arr, attr, value) {
            var i = arr.length;
            while (i--) {
                if (arr[i] && arr[i].hasOwnProperty(attr) && (arguments.length > 2 && arr[i][attr] === value)) {

                    arr.splice(i, 1);

                }
            }
            return arr;

        };

        //Remove duplicates from array 

        GlobalFactory.removeDuplicates = function(list) {

            var result = [];
            $.each(list, function(i, e) {
                if ($.inArray(e, result) === -1) {
                    result.push(e);
                }
            });

            return result;
        };

        // Is empty

        GlobalFactory.isEmpty = function(arr) {

            var empty = true;

            if (arr.length === 0) {
                return empty;
            }

            for (var i = 0; i < arr.length; i++) {
                if (!angular.equals({}, arr[i])) {
                    empty = false;
                }
            }
            return empty;
        };

        GlobalFactory.setAsDate = function(date, time) {

            var datePattern = 'DD-MM-YYYY';

            var newDate;
            var newTime;

            if (GlobalFactory.dateValid(date, false, false) && GlobalFactory.dateValid(date, time, true)) {
                newDate = $moment(date, datePattern);
                newTime = $moment(time, 'HH:mm');
                newDate.hour(newTime.get('hour')).minute(newTime.get('minute')).utcOffset();

            } else if (GlobalFactory.dateValid(date, false, false)) {
                newDate = $moment(date, datePattern);
                newDate.hour(0).minute(0).second(0).utcOffset();
            }
            return newDate;
        };


        GlobalFactory.isObject = function(obj) {
            return obj === Object(obj);
        };

        GlobalFactory.updateStep = function(completedSteps, step) {
            if ($.inArray(step, completedSteps) === -1) {
                return completedSteps.push(step);
            }
        };

        GlobalFactory.inArray = function(array, thing) {
            if ($.inArray(thing, array) > -1) {
                return true;
            }
            return false;
        };

        GlobalFactory.showStep = function(completedSteps, step) {
            if ($.inArray(step, completedSteps) !== -1) {
                return true;
            } else {
                var tot = completedSteps + 1;
                if (tot === step) {
                    return true;
                } else {
                    return false;
                }
            }
            return false;
        };

        return GlobalFactory;
    }
})();

/*jshint latedef:false*/

//Factory - MenuFactory

(function() {
    /*jshint -W004 */

    'use strict';

    angular
        .module('app.service.menu', [])
        .factory('MenuFactory', MenuFactory);

    MenuFactory.$inject = [];

    function MenuFactory() {

        var MenuFactory = {};

        MenuFactory.main = function() {
            var menu = [{
                id: 1,
                title: 'app.dashboard.name',
                nav: 'app.dashboard.name',
                description: null,
                icon: 'fa-home',
                link: 'dashboard',
                dash: false,
                primary: true,
                roles: ['admin']
            }, {
                id: 20,
                title: 'app.dashboard.section.createCustomer.title',
                nav: 'app.dashboard.section.createCustomer.nav',
                description: 'app.dashboard.section.createCustomer.desc',
                icon: 'fa-user-plus',
                link: 'customer/create',
                dash: true,
                primary: true,
                roles: ['admin'],
                subPages: [{
                    id: 21,
                    title: 'app.retailer.name',
                    nav: 'app.retailer.nav',
                    description: 'app.retailer.desc',
                    link: 'customer/create/retailer',
                    roles: ['admin']
                }, {
                    id: 22,
                    title: 'app.wholesale.name',
                    nav: 'app.wholesale.nav',
                    description: 'app.wholesale.desc',
                    link: 'customer/create/wholesale',
                    roles: ['admin']
                }]
            }, {
                id: 30,
                title: 'app.dashboard.section.customers.title',
                nav: 'app.dashboard.section.customers.nav',
                description: 'app.dashboard.section.customers.desc',
                link: 'customer/search',
                icon: 'fa fa-user',
                dash: true,
                primary: true,
                roles: ['admin']
            }, {
                id: 40,
                title: 'app.dashboard.section.news.title',
                nav: 'app.dashboard.section.news.nav',
                description: 'app.dashboard.section.news.desc',
                icon: 'fa-newspaper-o',
                link: 'news',
                dash: true,
                roles: ['admin']
            }, {
                id: 0,
                title: 'app.dashboard.section.notifications.title',
                nav: 'app.dashboard.section.notifications.nav',
                description: 'app.dashboard.section.notifications.desc',
                icon: 'fa-bell-o',
                link: 'notifications',
                dash: false,
                roles: ['admin']
            }];

            return menu;
        };

        MenuFactory.account = function() {
            var menu = [{
                id: 1000,
                nav: 'John Smithington',
                icon: 'fa-user',
                link: '#',
                primary: true,
                roles: ['admin'],
                subPages: [{
                    id: 1001,
                    nav: 'My Account',
                    icon: 'fa-key',
                    link: '#',
                    roles: ['admin']
                }, {
                    id: 1002,
                    nav: 'app.global.logout',
                    icon: 'fa-key',
                    link: 'logout',
                    roles: ['admin']
                }]
            }];

            return menu;
        };

        return MenuFactory;

    }

})();

/*jshint latedef:false*/

//Factory - NewsFactory

(function() {
    /*jshint -W004 */

    'use strict';

    angular
        .module('app.service.news', [
            'app.service.api'
        ])
        .factory('NewsFactory', NewsFactory);

    NewsFactory.$inject = ['$http', '$location', 'ApiUrl'];

    function NewsFactory($http, $location, ApiUrl) {

        var NewsFactory = {};
        var poe = 'news';

        // Connect

        NewsFactory.connect = function() {

            return $http.get(ApiUrl.connect() + poe + '/latest', {});
        };

        // Completed

        NewsFactory.completed = function(id) {

            return $http.get(ApiUrl.connect() + poe + '/complete/' + id, {});
        };

        return NewsFactory;
    }
})();

/*jshint latedef:false*/

//Factory - NotificationsFactory

(function() {
    /*jshint -W004 */

    'use strict';

    angular
        .module('app.service.notifications', [
            'app.service.api'
        ])
        .factory('NotificationsFactory', NotificationsFactory);

    NotificationsFactory.$inject = ['$http', '$location', 'ApiUrl'];

    function NotificationsFactory($http, $location, ApiUrl) {

        var NotificationsFactory = {};
        var poe = 'notifications';

        // Connect

        NotificationsFactory.connect = function() {

            return $http.get(ApiUrl.connect() + poe + '/latest', {});
        };

        // Completed

        NotificationsFactory.completed = function(id) {

            return $http.get(ApiUrl.connect() + poe + '/complete/' + id, {});
        };

        return NotificationsFactory;
    }
})();

/*jshint latedef:false*/

//Factory - ReferenceFactory

(function() {
    /*jshint -W004 */

    'use strict';

    angular
        .module('app.service.reference', [
            'app.service.api'
        ])
        .factory('ReferenceFactory', ReferenceFactory);

    ReferenceFactory.$inject = ['$http', '$location', 'ApiUrl'];

    function ReferenceFactory($http, $location, ApiUrl) {

        var ReferenceFactory = {};
        var poe = 'reference';

        // Example Get Request

        ReferenceFactory.exampleGetRequest = function() {

            return $http.get(ApiUrl.connect() + poe + '/exampleGetRequest', {});
        };

        //  Example Post Request

        ReferenceFactory.examplePostRequest = function(data) {

            return $http({
                method: 'POST',
                url: ApiUrl.connect() + poe + '/examplePostRequest',
                headers: {},
                data: angular.toJson(data)
            });

        };

        return ReferenceFactory;
    }
})();

/*jshint latedef:false*/

//Factory - SaveFormsFactory

(function() {
    /*jshint -W004 */

    'use strict';

    angular
        .module('app.service.saveforms', [
            'app.service.api'
        ])
        .factory('SaveFormsFactory', SaveFormsFactory);

    SaveFormsFactory.$inject = ['$http', '$location', 'ApiUrl'];

    function SaveFormsFactory($http, $location, ApiUrl) {

        var SaveFormsFactory = {};
        var poe = 'saveforms';

        // Example Get Request

        SaveFormsFactory.customer = function() {

            return $http.get(ApiUrl.connect() + poe + '/customer', {});
        };

        //  Example Post Request

        SaveFormsFactory.retailer = function(data) {

            return $http({
                method: 'POST',
                url: ApiUrl.connect() + poe + '/retailer',
                headers: {},
                data: angular.toJson(data)
            });

        };

        return SaveFormsFactory;
    }
})();

/*jshint latedef:false*/

//Factory - SearchFactory

(function() {
    /*jshint -W004 */

    'use strict';

    angular
        .module('app.service.search', [
            'app.service.api'
        ])
        .factory('SearchFactory', SearchFactory);

    SearchFactory.$inject = ['$http', '$location', 'ApiUrl'];

    function SearchFactory($http, $location, ApiUrl) {


        /* -------------------------------------------------------------------------------------------------
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        API Functions

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        ------------------------------------------------------------------------------------------------- */

        var SearchFactory = {};
        var poe = 'customers';

        //  Customers

        SearchFactory.customers = function() {

            // return $http({
            //     method: 'POST',
            //     url: ApiUrl.connect() + poe + '/customers/feed',
            //     headers: {},
            //     data: angular.toJson(data)
            // });
            return $http.get(ApiUrl.connect() + poe + '/feed', {});

        };


        //  Customers Summary

        SearchFactory.customersSummary = function() {

            return $http.get(ApiUrl.connect() + poe + '/summary', {});

        };


        return SearchFactory;
    }
})();

/*jshint latedef:false*/

//Factory - StorageFactory

(function() {
    /*jshint -W004 */

    'use strict';

    angular
        .module('app.service.storage', [
            'LocalStorageModule'
        ])
        .factory('StorageFactory', StorageFactory);

    StorageFactory.$inject = ['localStorageService'];

    function StorageFactory(localStorageService) {

        var StorageFactory = {};

        // Search Query local save

        StorageFactory.getSearchQuery = function() {

            if (localStorageService.get('search_query')) {
                return localStorageService.get('search_query');
            }
        };

        StorageFactory.setSearchQuery = function(search_query) {

            if (search_query) {
                localStorageService.set('search_query', search_query);
            } else {
                StorageFactory.removeDepartureDate();
            }
        };

        StorageFactory.removeSearchQuery = function() {

            localStorageService.remove('search_query');
        };

        // Search Results local save

        StorageFactory.getSearchResults = function() {

            if (localStorageService.get('search_results')) {
                return localStorageService.get('search_results');
            }
        };

        StorageFactory.setSearchResults = function(search_results) {

            if (search_results) {
                localStorageService.set('search_results', search_results);
            } else {
                StorageFactory.removeDepartureDate();
            }
        };

        StorageFactory.removeSearchResults = function() {

            localStorageService.remove('search_results');
        };

        return StorageFactory;
    }
})();

/*jshint latedef:false*/

//Factory - TitleFactory

(function () {
    /*jshint -W004 */

    'use strict';

    angular
        .module('app.service.title', [])
        .factory('TitleFactory', TitleFactory);

    TitleFactory.$inject = ['$rootScope'];

    function TitleFactory($rootScope) {

        var TitleFactory = {};

        TitleFactory.setTitle = function (title) {
            $rootScope.pageSubTitle = null;
            $rootScope.pageTitle = title;
        };

        TitleFactory.setSubTitle = function (title) {
            $rootScope.pageSubTitle = title;
        };

        return TitleFactory;

    }

})();

/*jshint latedef:false*/

//Factory - ValidationFactory

(function() {
    /*jshint -W004 */

    'use strict';

    angular
        .module('app.service.validation', [])
        .factory('ValidationFactory', ValidationFactory);

    ValidationFactory.$inject = ['GlobalFactory'];

    function ValidationFactory(GlobalFactory) {

        var ValidationFactory = {};

        // Check Valid Time and Date

        ValidationFactory.hasDateValid = function(list, aDate, aTime, step, check, rootErrors, entryValid) {

            var errors = [];

            if (step) {
                step = 'Activity ' + step + ': ';
            } else {
                step = '';
            }

            if (GlobalFactory.inArray(list, 'date')) {
                if (!aDate) {
                    errors.push(step + 'You have an activity date that is not valid.');
                    entryValid = false;
                } else {
                    if (aDate === 'past') {
                        errors.push(step + 'You have an activity date too far in the past.');
                        entryValid = false;
                    }
                    if (aDate === 'future') {
                        errors.push(step + 'You have an activity date too far in the future.');
                        entryValid = false;
                    }
                }
            }

            if (GlobalFactory.inArray(list, 'time')) {
                if (!aTime) {
                    errors.push(step + 'You have an activity time that is not valid.');
                    entryValid = false;
                } else {
                    if (aTime === 'past') {
                        errors.push(step + 'You have an activity time too far in the past.');
                        entryValid = false;
                    }
                    if (aTime === 'future') {
                        errors.push(step + 'You have an activity time too far in the future.');
                        entryValid = false;
                    }
                }
            }

            if (!check) {
                errors = _.uniqWith(errors, _.isEqual);
                for (var e in errors) {
                    rootErrors.push(errors[e]);
                }
            }

            return entryValid;
        };

        return ValidationFactory;
    }
})();

/*jshint latedef:false*/

//Factory - activeInactive

(function() {
    /*jshint -W004 */

    'use strict';

    angular
        .module('whitelabelApp')
        .filter('activeInactive', activeInactive);

    activeInactive.$inject = [];

    function activeInactive() {

        return function (input) {

            if(input === true || input === 'true') {
                return 'Active';
            }else if(input === false || input === 'false') {
                return 'Inactive';
            }else{
                return input;
            }
        };

    }

})();
/*jshint latedef:false*/

//Factory - dateUTC

(function() {
    /*jshint -W004 */

    'use strict';

    angular
        .module('whitelabelApp')
        .filter('dateUTC', dateUTC);

    dateUTC.$inject = ['$filter'];

    function dateUTC($filter) {

        return function(date) {

            var d = new Date(date);
            var n = d.getTime();

            if ($filter('date')(n, 'HH:mm:ss', 'UTC') === '00:00:00' || $filter('date')(n, 'HH:mm:ss', 'UTC') === '23:59:59') {
                return $filter('date')(date, 'dd/MM/yyyy', 'UTC');
            } else {
                return $filter('date')(date, 'dd/MM/yyyy - HH:mm', 'UTC');
            }
        };

    }

})();

/*jshint latedef:false*/

//Factory - toDec

(function() {
    /*jshint -W004 */

    'use strict';

    angular
        .module('whitelabelApp')
        .filter('toDec', toDec);

    toDec.$inject = [];

    function toDec() {

        return function (input) {
            var number = parseFloat(Math.round(input * 100) / 100).toFixed(2);
            return number.replace(/\.0+$/,'');
        };

    }

})();
/*jshint latedef:false*/

//Factory - fullDateUTC

(function() {
    /*jshint -W004 */

    'use strict';

    angular
        .module('whitelabelApp')
        .filter('fullDateUTC', fullDateUTC);

    fullDateUTC.$inject = ['$filter'];

    function fullDateUTC($filter) {

        return function(date) {
            return $filter('date')(date, 'fullDate', 'UTC');
        };

    }

})();

/*jshint latedef:false*/

//Factory - toCaps

(function () {
    /*jshint -W004 */

    'use strict';

    angular
        .module('whitelabelApp')
        .filter('toCaps', toCaps);

    toCaps.$inject = [];

    function toCaps() {

        return function (input) {
            if (input) {
                //input = input.toLowerCase();
                return (!!input) ? input.replace('^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$', function (txt) {
                    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
                }) : '';
            }
        };

    }

})();

/*jshint latedef:false*/

//Factory - trueFalse

(function () {
    /*jshint -W004 */

    'use strict';

    angular
        .module('whitelabelApp')
        .filter('trueFalse', trueFalse);

    trueFalse.$inject = [];

    function trueFalse() {

        return function (input) {

            if (input === true || input === 'true') {
                return 'app.global.button.yes';
            } else if (input === false || input === 'false') {
                return 'app.global.button.no';
            } else {
                return input;
            }
        };

    }

})();

/*jshint latedef:false*/

//Factory - unique

(function () {
    /*jshint -W004 */

    'use strict';

    angular
        .module('whitelabelApp')
        .filter('unique', unique);

    unique.$inject = [];

    function unique() {

        return function (items, filterOn) {

            if (filterOn === false) {
                return items;
            }

            if ((filterOn || angular.isUndefined(filterOn)) && angular.isArray(items)) {
                var newItems = [];

                var extractValueToCompare = function (item) {
                    if (angular.isObject(item) && angular.isString(filterOn)) {
                        return item[filterOn];
                    } else {
                        return item;
                    }
                };

                angular.forEach(items, function (item) {
                    var isDuplicate = false;

                    for (var i = 0; i < newItems.length; i++) {
                        if (angular.equals(extractValueToCompare(newItems[i]), extractValueToCompare(item))) {
                            isDuplicate = true;
                            break;
                        }
                    }
                    if (!isDuplicate) {
                        newItems.push(item);
                    }

                });
                items = newItems;
            }
            return items;
        };

    }

})();

/*jshint latedef:false*/

//Directive - ssBackToTop

(function () {
    'use strict';

    angular
        .module('ssBackToTop', [])
        .directive('ssBackToTop', ssBackToTop);

    ssBackToTop.$inject = ['$compile'];

    function ssBackToTop($compile) {

        return {
            restrict: 'E',
            transclude: true,
            replace: true,
            templateUrl: 'components/back-to-top/back-to-top.template.html',
            scope: {
                text: '@buttonText',
                speed: '@scrollSpeed'
            },
            link: function (scope, element) {
                $compile(element.contents())(scope.$new());

                var self = element;

                scope.currentYPosition = function () {

                    if (self.pageYOffset) {
                        return self.pageYOffset;
                    }
                    if (document.documentElement && document.documentElement.scrollTop) {
                        return document.documentElement.scrollTop;
                    }
                    if (document.body.scrollTop) {
                        return document.body.scrollTop;
                    }
                    return 0;
                };

                scope.smoothScroll = function () {
                    var startY = scope.currentYPosition();
                    var stopY = 0;
                    var distance = stopY > startY ? stopY - startY : startY - stopY;
                    if (distance < 100) {
                        scrollTo(0, stopY);
                        return;
                    }
                    var speed = Math.round(scope.speed / 100);
                    var step = Math.round(distance / 25);
                    var leapY = stopY > startY ? startY + step : startY - step;
                    var timer = 0;
                    if (stopY > startY) {
                        for (var i = startY; i < stopY; i += step) {
                            setTimeout('window.scrollTo(0, ' + leapY + ')', timer * speed);
                            leapY += step;
                            if (leapY > stopY) {
                                leapY = stopY;
                            }
                            timer++;
                        }
                        return;
                    }
                    for (var j = startY; j > stopY; j -= step) {
                        setTimeout('window.scrollTo(0, ' + leapY + ')', timer * speed);
                        leapY -= step;
                        if (leapY < stopY) {
                            leapY = stopY;
                        }
                        timer++;
                    }
                };

                scope.button = $(element).find('button');

                scope.button.on('click', function () {
                    scope.smoothScroll();
                    $(element).removeClass('show');
                });

                window.addEventListener('scroll', function () {
                    var top = (window.scrollY || window.pageYOffset);
                    if (top > 0) {
                        $(element).addClass('show');
                    } else {
                        $(element).removeClass('show');
                    }
                });
            }
        };
    }

})();

/*jshint latedef:false*/

//Directive - ssCheckbox

(function () {
    'use strict';

    angular
        .module('ssCheckbox', [])
        .directive('ssCheckbox', ssCheckbox);

    ssCheckbox.$inject = [];

    function ssCheckbox() {

        return {
            restrict: 'E',
            replace: true,
            templateUrl: 'components/checkbox/checkbox.template.html',
            scope: {
                model: '=',
                uniq: '@?',
                text: '@',
                type: '@',
                action: '&?',
                actionAfter: '&?',
                main: '=?',
                sub: '=?',
                col: '=?'
            },
            controller: function ($scope, $timeout) {

                $scope.index = Math.random() + Math.random() * (999 - 99) + 99;

                $scope.checked = false;
                $scope.activeClass = '';

                if ($scope.model) {
                    $scope.activeClass = 'active';
                }

                $scope.col = $scope.col ? $scope.col : $scope.sub;
                $scope.large = $scope.main ? $scope.main : '12';

                $scope.toggleIt = function (keydown, e) {

                    if (keydown && e.keyCode !== 13) {
                        return false;
                    }

                    if (typeof $scope.action === 'function') {
                        $scope.action();
                    }

                    if ($scope.type === 'checkbox') {
                        $scope.model = !$scope.model;
                    }

                    if ($scope.type === 'radio') {
                        $scope.model = $scope.uniq;

                    }

                    $timeout(function () {
                        $scope.$apply();

                        if (typeof $scope.actionAfter === 'function') {
                            $scope.actionAfter();
                        }
                    });

                };

                $scope.$watch('model', function (newVal) {
                    if ($scope.type === 'checkbox') {
                        if (newVal === true) {
                            $scope.activeClass = 'active';
                        } else {
                            $scope.activeClass = '';
                        }
                    }

                    if ($scope.type === 'radio') {
                        if (newVal === $scope.uniq) {
                            $scope.activeClass = 'active';
                        } else {
                            $scope.activeClass = '';
                        }
                    }
                    $timeout(function () {
                        $scope.$apply();
                    });
                }, true);
            }
        };
    }

})();

/*jshint latedef:false*/

//Directive - ssButton


(function() {
    'use strict';

    angular
        .module('ssButton', [])
        .directive('ssButton', ssButton);

    ssButton.$inject = ['$compile'];

    function ssButton($compile) {

        return {
            restrict: 'E',
            transclude: true,
            replace: true,
            templateUrl: 'components/button/button.template.html',
            scope: {
                text: '@?',
                icon: '@?',
                action: '&',
                type: '@?',
                classes: '@?'
            },
            link: function(scope, element) {
                $compile(element.contents())(scope.$new());
            },
            controller: function($scope) {

                $scope.justIcon = undefined;

                if (!$scope.type) {
                    $scope.type = 'primary';
                }
                if (!$scope.text && $scope.icon) {
                    $scope.justIcon = 'button-icon';
                }

            }
        };
    }

})();

/*jshint latedef:false*/

//Directive - ssLoader

(function () {
    'use strict';

    angular
        .module('ssLoader', [])
        .directive('ssLoader', ssLoader);

    ssLoader.$inject = ['$compile'];

    function ssLoader($compile) {

        return {
            restrict: 'E',
            templateUrl: 'components/loader/loader.template.html',
            link: function (scope, element) {
                $compile(element.contents())(scope.$new());
            }
        };
    }

})();

/* jshint ignore:start */

'use strict';

var DatePicker = angular.module('date-picker', []);

DatePicker.directive('datePicker', ["$log", "$document", "$filter", "$timeout", fznDatePicker]);

function fznDatePicker($log, $document, $filter, $timeout) {

    var dates = {
        en: {
            months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            today: "Today",
            placeholder: "Select Date"
        },
        fr: {
            months: ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"],
            monthsShort: ["Jan", "Fev", "Mar", "Avr", "Mai", "Jun", "Jul", "Aoû", "Sep", "Oct", "Nov", "Dec"],
            today: "Aujourd'hui",
            placeholder: "Date Selection"
        },
        es: {
            months: ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Deciembre"],
            monthsShort: ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"],
            today: "Hoy"
        },
        de: {
            months: ["Januar", "Februar", "Marz", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"],
            monthsShort: ["Jan", "Feb", "Mar", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"],
            today: "Heute"
        },
        nl: {
            months: ["Januari", "Februari", "Maart", "April", "Mei", "Juni", "Juli", "Augustus", "September", "Oktober", "November", "December"],
            monthsShort: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"],
            today: "Vandaag"
        }
    };

    var partials = {
        headTemplate: '<thead>' +
            '<tr>' +
            '<th class="prev"><i class="fa fa-chevron-left"></i></th>' +
            '<th colspan="5" class="date-switch"></th>' +
            '<th class="next"><i class="fa fa-chevron-right"></i></th>' +
            '</tr>' +
            '</thead>',
        contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>',
        footTemplate: '<tfoot ng-show="todayButton"><tr><th colspan="7" class="today">{{todayButton}}</th></tr></tfoot>',
        headTemplateDays: '<thead>' +
            '<tr>' +
            '<th class="prev"><i class="fa fa-chevron-left"></i></th>' +
            '<th colspan="5" class="date-switch"></th>' +
            '<th class="next"><i class="fa fa-chevron-right"></i></th>' +
            '</tr>' +
            '</thead>',
        footTemplateDays: '<tfoot class="picker {{todayClass}}" ng-show="todayButton"><tr><th colspan="7" class="today">{{todayButton}}</th></tr></tfoot>'
    };

    var template = '<div class="fzn-date-picker"> ' +
        '<div ng-click="displayPicker()" class="date-display" tabIndex="-1">' +
        '<label for={{pickerid}} class="date-input-label"></label>' +
        '<input readonly id={{pickerid}} class="date-input" placeholder="{{placeholder}}" value="{{modelviewvalue}}">' +
        '<span class="date-input-icon"></span>' +

        '<div ng-show="showPicker" class="datepicker datepicker-dropdown">' +
        '<div ng-show="viewMode === 0" class="datepicker-days">' +
        '<table class=" table-condensed">' +
        partials.headTemplateDays +
        '<tbody></tbody>' +
        partials.footTemplateDays +
        '</table>' +
        '</div>' +

        '<div ng-show="viewMode === 1" class="datepicker-months">' +
        '<table class="table-condensed">' +
        partials.headTemplate +
        partials.contTemplate +
        partials.footTemplate +
        '</table>' +
        '</div>' +

        '<div ng-show="viewMode === 2" class="datepicker-years">' +
        '<table class="table-condensed">' +
        partials.headTemplate +
        partials.contTemplate +
        partials.footTemplate +
        '</table>' +
        '</div>' +
        '<a class="button datepicker-close small alert right" style="width:auto;"><i class="fa fa-remove fa-times fi-x"></i></a>' +
        '</div>';

    var DPGlobal = {
        modes: [{
            clsName: 'days',
            navFnc: 'Month',
            navStep: 1
        }, {
            clsName: 'months',
            navFnc: 'FullYear',
            navStep: 1
        }, {
            clsName: 'years',
            navFnc: 'FullYear',
            navStep: 10
        }],
        isLeapYear: function (year) {
            return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));
        },
        getDaysInMonth: function (year, month) {
            return [31, (DPGlobal.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
        },
        formatDate: function (date, format, timezone) {

            var datestring = $filter('date')(date, format, timezone);
            return (datestring);
        }
    };

    function link(scope, element, attrs, model) {

        var monthOnly = attrs.monthOnly;

        // Logic for body listerner function
        var bodyListenerLogic = function (e) {
            var clickedElement = e.target;
            var insideDatepicker = false;
            do {
                // if user clicks inside datepicker
                if (clickedElement != document && (clickedElement.classList && (clickedElement.classList.contains('showPicker') || clickedElement.classList.contains('fzn-date-picker')))) {
                    insideDatepicker = true;
                    break;
                }
            } while ((clickedElement = clickedElement.parentNode));
            if (!insideDatepicker) {
                scope.hide(true);
                unregisterBodyListener();
            }
        }

        // function to register click handler for body
        var registerBodyListener = function () {
            document.body.addEventListener('click', bodyListenerLogic)
        };

        // function to unregister click handler for body
        var unregisterBodyListener = function () {
            document.body.removeEventListener('click', bodyListenerLogic)
        }

        // update external representation when internal value change
        model.$formatters.unshift(function (date) {

            // move from internal object format to external view string
            var fmtdata = DPGlobal.formatDate(date, scope.format);

            // check date validity
            if (date < scope.startDate) model.$setValidity("DATE-TOO-EARLY", false);
            if (date > scope.endDate) model.$setValidity("DATE-TOO-LATE", false);

            // update template
            scope.modelviewvalue = fmtdata;

            return (fmtdata);
        });

        // Update Internal form when external representation change
        model.$parsers.unshift(function (value) {
            return "Hoops";
        });

        scope.moveMonth = function (date, dir) {
            if (!dir) return date;
            var new_date = scope.ngModel,
                day = new_date.getDate(),
                month = new_date.getMonth(),
                mag = Math.abs(dir),
                new_month, test;
            dir = dir > 0 ? 1 : -1;
            if (mag == 1) {
                test = dir === -1
                    // If going back one month, make sure month is not current month
                    // (eg, Mar 31 -> Feb 31 == Feb 28, not Mar 02)
                    ? function () {
                        return new_date.getMonth() == month;
                    }
                    // If going forward one month, make sure month is as expected
                    // (eg, Jan 31 -> Feb 31 == Feb 28, not Mar 02)
                    : function () {
                        return new_date.getMonth() != new_month;
                    };
                new_month = month + dir;
                new_date.setMonth(new_month);
                // Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11
                if (new_month < 0 || new_month > 11)
                    new_month = (new_month + 12) % 12;
            } else {
                // For magnitudes >1, move one month at a time...
                for (var i = 0; i < mag; i++)
                // ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...
                    new_date = scope.moveMonth(new_date, dir);
                // ...then reset the day, keeping it in the new month
                new_month = new_date.getMonth();
                new_date.setDate(day);
                test = function () {
                    return new_month != new_date.getMonth();
                };
            }
            // Common date-resetting loop -- if date is beyond end of month, make it
            // end of month
            while (test()) {
                new_date.setDate(--day);
                new_date.setMonth(new_month);
            }
            return new_date;
        };

        scope.moveYear = function (date, dir) {
            return scope.moveMonth(date, dir * 12);
        };

        scope.showMode = function (dir) {
            if (dir) {
                scope.viewMode = Math.max(0, Math.min(2, scope.viewMode + dir));
                scope.$apply(); // notify template/view that scope changed
                scope.updateNavArrows();
            }
        };

        // emulate jQuery closest API to enable search by tag+class within current element and parents
        scope.closest = function (angelem, selector) {
            var parent = angelem;
            while (parent[0]) {
                for (var idx = 0; idx < selector.length; idx++) {
                    if (selector[idx] === parent[0].tagName) {
                        return parent;
                    } // HTMLDivElement properties
                }
                parent = parent.parent();
            }
            // alert ("Browser not supported [scope.closest please report a bug]");
        };

        scope.today = function () {
            var now = new Date();
            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0, 0);
            return today;
        };

        // update internal value of ng-model [external form is updated automatically through scope/watch]
        scope.setDate = function (date) {

            $timeout(function () {

                // if no date is provided take Today/NOW
                if (!date) date = scope.today();

                // update date model through its scope

                scope.$apply(function () {
                    scope.ngModel = date;
                });

                model.$setTouched();
                if (scope.autohide) scope.hide(true);

                // if a callback defined call it now
                if (scope.callback) scope.callback(date, scope.pickerid);

            });
        };

        // If start/end date is provided this will display or not corresponding arrows
        scope.updateNavArrows = function () {
            var d = scope.viewDate,
                year = d.getFullYear(),
                month = d.getMonth();
            switch (scope.viewMode) {
            case 0:
                if (year <= scope.startDate.getFullYear() && month <= scope.startDate.getMonth()) {
                    scope.find('.prev').css({
                        visibility: 'hidden'
                    });
                } else {
                    scope.find('.prev').css({
                        visibility: 'visible'
                    });
                }
                if (year >= scope.endDate.getFullYear() && month >= scope.endDate.getMonth()) {
                    scope.find('.next').css({
                        visibility: 'hidden'
                    });
                } else {
                    scope.find('.next').css({
                        visibility: 'visible'
                    });
                }
                break;
            case 1:
            case 2:
                if (year <= scope.startDate.getFullYear()) {
                    scope.find('.prev').css({
                        visibility: 'hidden'
                    });
                } else {
                    scope.find('.prev').css({
                        visibility: 'visible'
                    });
                }
                if (year >= scope.endDate.getFullYear()) {
                    scope.find('.next').css({
                        visibility: 'hidden'
                    });
                } else {
                    scope.find('.next').css({
                        visibility: 'visible'
                    });
                }
                break;
            }
        };

        scope.fillMonths = function () {
            var html = '',
                i = 0;
            while (i < 12) {
                html += '<span class="picker month">' + dates[scope.language].monthsShort[i++] + '</span>';
            }
            scope.find('.datepicker-months td').html(html);
        };

        scope.fill = function () {

            var viewyear = scope.viewDate.getFullYear();
            var viewmonth = scope.viewDate.getMonth();
            var viewdate = scope.viewDate.getDate();
            var startYear = scope.startDate.getFullYear();
            var startMonth = scope.startDate.getMonth();
            var endYear = scope.endDate.getFullYear();
            var endMonth = scope.endDate.getMonth();
            var today = scope.today();

            // insert current date on top of picker table
            scope.find('.datepicker-days th.date-switch').text(dates[scope.language].months[viewmonth] + ' ' + viewyear);

            scope.updateNavArrows();
            scope.fillMonths();

            var prevMonth = new Date(viewyear, viewmonth - 1, 28, 0, 0, 0, 0);
            var day = DPGlobal.getDaysInMonth(prevMonth.getFullYear(), prevMonth.getMonth());

            prevMonth.setDate(day);
            prevMonth.setDate(day - (prevMonth.getDay() - scope.weekStart + 7) % 7);
            var nextMonth = new Date(prevMonth.valueOf());
            nextMonth.setDate(nextMonth.getDate() + 42);
            nextMonth = nextMonth.valueOf();
            var html = [];
            var clsName;
            var disableday;

            while (prevMonth.valueOf() < nextMonth) {
                clsName = "picker"; // reset classes for new picker element
                if (prevMonth.getDay() === scope.weekStart) {
                    html.push('<tr>');
                    if (scope.calendarWeeks) {
                        // adapted from https://github.com/timrwood/moment/blob/master/moment.js#L128
                        var a = new Date(prevMonth.getFullYear(), prevMonth.getMonth(), prevMonth.getDate() - prevMonth.getDay() + 10 - (scope.weekStart && scope.weekStart % 7 < 5 && 7)),
                            b = new Date(a.getFullYear(), 0, 4),
                            calWeek = ~~((a - b) / 864e5 / 7 + 1.5);
                        html.push('<td class="cw">' + calWeek + '</td>');
                    }
                }

                if (prevMonth.valueOf() < scope.startDate.valueOf() || prevMonth.valueOf() > scope.endDate.valueOf() ||
                    scope.dayoff.indexOf(prevMonth.getDay()) !== -1) {
                    clsName += ' disabled';
                    disableday = true;
                } else disableday = false;

                if (prevMonth.getFullYear() < viewyear || (prevMonth.getFullYear() === viewyear && prevMonth.getMonth() < viewmonth)) {
                    clsName += ' old';
                } else if (prevMonth.getFullYear() > viewyear || (prevMonth.getFullYear() === viewyear && prevMonth.getMonth() > viewmonth)) {
                    clsName += ' new';
                }
                // Process Today highlight and button Display
                if (prevMonth === today) {
                    if (scope.todayHighlight) clsName += ' today';
                    if (attrs.today) {
                        if (disableday) scope.todayClass = 'disabled';
                        else scope.todayClass = "enable";
                    }
                }

                if (viewyear === prevMonth.getFullYear() && viewmonth === prevMonth.getMonth() && viewdate === prevMonth.getDate()) {
                    clsName += ' active';
                }

                html.push('<td class="day ' + clsName + '">' + prevMonth.getDate() + '</td>');
                if (prevMonth.getDay() === scope.weekEnd) {
                    html.push('</tr>');
                }
                prevMonth.setDate(prevMonth.getDate() + 1);
            }

            scope.find('.datepicker-days tbody').empty().append(html.join(''));
            scope.find(".datepicker-days tbody").prepend('<tr class="days"><td>Mon</td><td>Tue</td><td>Wed</td><td>Thu</td><td>Fri</td><td>Sat</td><td>Sun</td></tr>')

            var currentYear = scope.viewDate.getFullYear();

            var monthspicker = scope.find('.datepicker-months');
            scope.find('th.date-switch', monthspicker).text(viewyear);
            var monthspan = monthspicker.find('span', monthspicker);
            monthspan.removeClass('active');

            if (currentYear && currentYear === viewyear) {
                monthspan.eq(scope.viewDate.getMonth()).addClass('active');
            }
            if (viewyear < startYear || viewyear > endYear) {
                monthspan.addClass('disabled');
            }

            if (viewyear === startYear) {
                // monthspan.slice(0, startMonth).addClass('disabled');
                for (var idx = 0; idx < startMonth; idx++) {
                    monthspan.eq(idx).addClass('disabled');
                }
            }
            if (viewyear === endYear) {
                //monthspan.slice(endMonth+1).addClass('disabled');
                for (var idx = endMonth + 1; idx < monthspan.length; idx++) {
                    monthspan.eq(idx).addClass('disabled');
                }
            }

            html = '';
            viewyear = parseInt(viewyear / 10, 10) * 10;
            var yearCont = scope.find('.datepicker-years');
            scope.find('th.date-switch', yearCont).text(viewyear + '-' + (viewyear + 9));
            yearCont = yearCont.find('td');
            viewyear -= 1;
            for (var i = -1; i < 11; i++) {
                html += '<span class="picker year' + (i === -1 || i === 10 ? ' old' : '') + (currentYear === viewyear ? ' active' : '') + (viewyear < startYear || viewyear > endYear ? ' disabled' : '') + '">' + viewyear + '</span>';
                viewyear += 1;
            }
            yearCont.html(html);
        };

        // Place picker on the screen [need to be fixes to handle exceptions]
        scope.place = function () {
            scope.picker.css({
                top: element.children('.date-display')[0].offsetTop + element.children('.date-display')[0].clientHeight + 'px',
                left: element[0].offsetLeft + 'px',
                zIndex: 100,
                display: "block"
            });
        };

        scope.update = function () {
            // Clone current picker's date model value
            scope.viewDate = new Date(scope.ngModel || new Date());

            if (this.viewDate < this.startDate) {
                this.viewDate = new Date(this.startDate.valueOf());
            } else if (this.viewDate > this.endDate) {
                this.viewDate = new Date(this.endDate.valueOf());
            }
            this.fill();
        };

        scope.dateValueWithinRange = function (date) {
            return date >= scope.startDate && date <= scope.endDate;
        };

        // This method handle DOM event on Picker and depending on clicked zone update view date
        // Because of light version of Angular jQuery it unfortunately mixes both DOM and Angular elements
        scope.onclick = function (domelem) {

            // move from DOM element to Angular Element
            var angelem = angular.element(domelem);

            // in case we have a close button check it 1st
            if (angelem.hasClass('datepicker-close')) {
                scope.hide(true);
                return;
            }

            // search for closest element by tag to find which one was clicked
            var closestElemNg = scope.closest(angelem, ['SPAN', 'TD', 'TH']);

            if (!_.isNil(closestElemNg) && !_.isEmpty(closestElemNg)) {

                switch (closestElemNg[0].tagName) {
                case 'TH':
                    if (closestElemNg.hasClass("date-switch")) {
                        scope.showMode(1);
                    };

                    if (closestElemNg.hasClass("prev") || closestElemNg.hasClass("next")) {

                        var dir = DPGlobal.modes[scope.viewMode].navStep * (closestElemNg.hasClass("prev") ? -1 : 1);
                        switch (scope.viewMode) {
                        case 0:
                            scope.viewDate = scope.moveMonth(scope.viewDate, dir);
                            break;
                        case 1:
                        case 2:
                            scope.viewDate = scope.moveYear(scope.viewDate, dir);
                            break;
                        }
                        scope.fill();
                    } else if (closestElemNg.hasClass('today')) {
                        // select current day and force picker closing
                        scope.setDate();
                        if (scope.autohide) scope.hide(true);
                        break;
                    }
                    break;

                case 'SPAN':
                    if (!closestElemNg.hasClass('disabled')) {
                        if (closestElemNg.hasClass('month')) {
                            var months = closestElemNg.parent().find("span");
                            for (var idx = 0; idx < months.length; idx++) {
                                if (closestElemNg.text() === months.eq(idx).text()) {
                                    scope.viewDate.setMonth(idx);
                                    break;
                                }
                            }

                        } else {
                            var year = parseInt(closestElemNg.text(), 10) || 0;
                            scope.viewDate.setFullYear(year);
                        }
                        if (monthOnly && !closestElemNg.hasClass('disabled') && closestElemNg.hasClass('month')) {
                            scope.showMode(-1);
                            scope.fill();
                            var temp = document.querySelector('.datepicker-days td.day.picker:not(.old)');
                            scope.onclick(temp);
                            scope.hide(true);
                        } else {
                            scope.showMode(-1);
                            scope.fill();
                        }
                    }
                    break;
                case 'TD':
                    if (closestElemNg.hasClass('day') && !closestElemNg.hasClass('disabled')) {

                        var day = parseInt(closestElemNg.text(), 10) || 1;
                        var year = scope.viewDate.getFullYear(),
                            month = scope.viewDate.getMonth();
                        if (closestElemNg.hasClass('old')) {
                            if (month === 0) {
                                month = 11;
                                year -= 1;
                            } else {
                                month -= 1;
                            }
                        } else if (closestElemNg.hasClass('new')) {
                            if (month === 11) {
                                month = 0;
                                year += 1;
                            } else {
                                month += 1;
                            }
                        }
                        scope.setDate(new Date(year, month, day, 0, 0, 0, 0));
                    }
                    break;
                }
            }
        };

        // Minimal keystroke handling to close picker with ESC
        scope.keydown = function (e) {
            switch (e.keyCode) {
            case 27: // escape
            case 13: // enter
            case 9: // tab
                scope.hide(true);
            }
        };

        // simulate jquery find by classes capabilities [warning only return 1st elements]
        scope.find = function (select, elem) {
            var domelem;

            if (elem) domelem = elem[0].querySelector(select);
            else domelem = element[0].querySelector(select);

            var angelem = angular.element(domelem);
            return (angelem);
        };

        scope.setStartDate = function (startDate) {
            if (startDate) {
                if (startDate.length < 11) {
                    var BDate = startDate.split(/\//);
                    var ADate = [BDate[1], BDate[0], BDate[2]].join('/');
                    var ADate = new Date(ADate);
                } else {
                    var ADate = startDate;
                }
                scope.startDate = ADate;
            } else {
                scope.startDate = new Date(0, 0, 0); // Sun Dec 31 1899
            }
        };

        scope.setEndDate = function (endDate) {
            if (endDate) {
                scope.endDate = endDate;
            } else {
                scope.endDate = new Date(3000, 0, 0); // hopefully far enough
            }
        };

        scope.show = function (apply) {

            // if not initial date provide one
            if (!scope.ngModel) {
                scope.ngModel = new Date();
            };

            scope.update();
            scope.place();
            if (monthOnly)
                scope.viewMode = 1;
            else
                scope.viewMode = 0;
            scope.showPicker = true;
            $document.on('keydown', scope.keydown);

            if (apply) scope.$apply();
        };

        scope.hide = function (apply) {

            scope.showPicker = false;
            scope.picker.off('mousedown');

            $document.unbind('keydown', scope.keydown);
            if (apply) scope.$apply();
        };

        // input field was selected
        scope.displayPicker = function (elem) {
            if (!scope.picker) {
                return;
            }

            if (!scope.showPicker) {
                scope.bindevent(scope.picker);
                scope.show();
                registerBodyListener();
            }
        };

        // bind mouse event
        scope.bindevent = function (picker) {

            function mousedown(event) {
                //console.log ("Mouse in Picker")
                event.preventDefault();
                if (event.explicitOriginalTarget) scope.onclick(event.explicitOriginalTarget); // Firefox
                else if (event.target) scope.onclick(event.target); // IExplorer & Chrome
                // else if (event.currentTarget)  {console.log ("curenttarget used"); scope.onclick (event.currentTarget)} // chrome
                else alert("Browser click event not supported [report a bug]");
            }

            function mouseup(event) {
                //console.log ("Mouse out of Picker")
                $document.off('mouseup');
            }
            picker.on('mousedown', mousedown);
        };

        // directive initialisation
        scope.init = function () {

            //$log.log("picker ID=%s", attrs.id, "scope=", scope, "element=", element, ' model=', model, ' contoller-date=', scope.ngModel);

            // Process week disable days [1=Monday, 6=Sunday]
            scope.dayoff = [];
            if (attrs.dayoff) {
                var dayoff = attrs.dayoff.split(',');
                for (var idx = 0; idx < dayoff.length; idx++) scope.dayoff.push(parseInt(dayoff[idx]));
            }
            scope.pickerid = attrs.id || "date-picker-" + parseInt(Math.random() * 1000);
            scope.language = attrs.language || scope.locale || "en";
            scope.autohide = attrs.autohide || true;
            scope.weekStart = attrs.weekstart || 1;
            scope.calendarWeeks = attrs.weeknum || false;
            scope.todayButton = attrs.today || false;
            scope.todayHighlight = attrs.highlight || true;
            scope.placeholder = attrs.placeholder || "";
            scope.format = attrs.format || scope.datefmt || "dd-MM-yyyy";
            scope.locales = dates[scope.language];

            // start/end Date are copied within private scope to avoid infinite loop when shared with an other picker
            scope.setStartDate(scope.notBefore);
            scope.setEndDate(scope.notAfter);

            if (attrs.today && scope.todayButton.toLowerCase() === "true") {
                scope.todayButton = scope.locales.today;
            }

            if (attrs.iconify) {
                var input = element.find('input');
                var label = element.find('label');
                input.addClass("date-input-hidden");
                label.addClass("date-input-hidden");
                element.addClass("fzn-iconified")
            }

            if (attrs.icon || attrs.iconify) {
                var span = element.find('span');
                span.addClass("icon-label-input fa fa-calendar fi-calendar");
            }

            if (attrs.label) {
                var label = element.find('label');
                label.html(attrs.label);
            } else {
                // if the label is not set, delete the label tag from template
                var label = element.find('label');
                label.remove();
            }

            // Monitor any changes on start/stop dates.
            scope.$watch('notBefore', function (newVal) {
                if (newVal) {
                    scope.setStartDate(scope.notBefore);
                    scope.update();
                    scope.updateNavArrows();
                }
            });

            scope.$watch('notAfter', function (newVal) {
                if (newVal) {
                    scope.setEndDate(scope.notAfter);
                    scope.update();
                    scope.updateNavArrows();
                }
            });

            scope.picker = scope.find('div .datepicker'); // bind mouse only on datepicker's div
        };

        scope.init();
    }

    return {
        restrict: "E", // restrict to <pickadate> HTML element name
        scope: {
            datefmt: '=', // see angular date format string
            locale: '=', // hopefully this is defined from controller
            ngModel: '=', // necessary to update internal from inside directive
            notAfter: '=', // First acceptable date
            notBefore: '=', // Last acceptable date
            callback: '&', // Callback to active when a date is selected
            monthOnly: '@'
        },
        template: template, // html template is build from JS
        require: 'ngModel', // get access to external/internal representation
        replace: true, // replace current directive with template while inheriting of class
        link: link // pickadate object's methods
    };
}

/* jshint ignore:end */

/*jshint latedef:false*/

//Directive - ssDatePicker

(function () {
    'use strict';

    angular
        .module('ssDatePicker', [
            'app.service.global',
            'date-picker'
        ])
        .directive('ssDatePicker', ssDatePicker);

    ssDatePicker.$inject = ['$compile', 'GlobalFactory'];

    function ssDatePicker($compile) {

        return {
            restrict: 'E',
            templateUrl: 'components/date-picker/date-picker.template.html',
            scope: {
                date: '=model',
                min: '=?',
                max: '=?',
                set: '=?',
                label: '@',
                selected: '=?',
                main: '=',
                sub: '=',
                large: '=',
                required: '=',
                dep: '=?',
                check: '=?',
                inc: '=?',
                flip: '=?',
                disable: '=?'
            },
            link: function (scope, element) {
                $compile(element.contents())(scope.$new());
            },
            controller: function ($scope, $location, $filter, $timeout, $moment, GlobalFactory) {

                $scope.boxClass = $scope.main;
                $scope.boxSubClass = $scope.sub;
                $scope.boxLargeClass = $scope.large;
                $scope.isRequired = $scope.required;

                $scope.label = $filter('translate')($scope.label);

                if (!$scope.dep) {
                    $scope.dep = null;
                }

                $scope.checkInput = function (e) {

                    var prevent = (e.keyCode >= 65 && e.keyCode <= 90) || (e.keyCode >= 106 && e.keyCode <= 222);

                    if (prevent || e.shiftKey && e.keyCode !== 9 || e.shiftKey && prevent) {
                        e.preventDefault();
                    }
                    $scope.addDivider(e);
                };

                $scope.addDivider = function (e) {

                    if (e.keyCode !== 8) {
                        if ($scope.date && $scope.date.length === 2 || $scope.date && $scope.date.length === 5) {
                            $scope.date = $scope.date + '/';
                        }
                    } else {
                        var temp = $scope.date;
                        if ($scope.date && $scope.date.length === 6) {
                            $scope.date = temp.substring(0, 4);
                        } else if ($scope.date && $scope.date.length === 3) {
                            $scope.date = temp.substring(0, 1);
                        }
                    }
                };

                $scope.checkValidDate = function (date, dep, rtp, allowFuture) {

                    if (!_.isNil(date)) {
                        if ($scope.flip) {
                            dep = GlobalFactory.flipDate(dep);
                        }
                        return GlobalFactory.dateValid(date, false, false, dep, rtp, allowFuture);
                    }
                };
                
                $scope.formatDate = function (date) {
                    if (date && date.length && date.indexOf('/') === -1) {

                        var re = new RegExp(/(\d{6})(\d{2})?/);

                        if (re.test(date)) {
                            if (date.length >= 8) {
                                date = date.substring(0, 2) + '/' + date.substring(2, 4) + '/' + date.substring(4, 8);
                            }
                        }
                        $scope.date = date;
                    }
                };

                $scope.completeDate = function () {
                    $scope.date = $moment($scope.dummyDate).format('DD/MM/YYYY');
                };

                $scope.$watch('set', function (newVal) {
                    if (newVal) {
                        $scope.date = $scope.set;
                    }
                }, true);

            }
        };
    }

})();

/*jshint latedef:false*/

//Directive - ssMenu

(function () {
    'use strict';

    angular
        .module('ssMenu',[])
        .directive('ssMenu', ssMenu);

    ssMenu.$inject = [];

    function ssMenu() {

        return {
            restrict: 'E',
            templateUrl: 'components/menu/menu.template.html',
            scope: {
                tasks: '=?',
                options: '=',
                media: '=?'
            },
            controller: function ($scope, $location, $timeout, $document) {

                if ($scope.options.type === 'vert') {
                    $scope.menuType = 'vertical-nav';
                } else {
                    $scope.menuType = 'header-nav';
                }

                $scope.expandedItem = null;
                $scope.activeItem = 1;

                if ($scope.media.phone || $scope.media.tablet) {
                    $scope.options.open = false;
                }

                $scope.$on('$routeChangeStart', function (event, next) {
                    if (next.$$route && next.$$route.originalPath) {
                        var newRoute = next.$$route.originalPath;
                        $scope.highlightPage(newRoute);
                    }
                });

                if ($scope.menuType === 'header-nav') {

                    $document.on('click', function () {
                        $scope.$apply(function () {
                            $scope.toggleState($scope.expandedItem);
                        });
                    });
                }

                $scope.highlightPage = function (path) {

                    if ($scope.options && !_.isNil($scope.options.pages)) {

                        if ($scope.menuType === 'vertical-nav') {

                            var current;

                            if (path) {
                                current = path;
                            } else {
                                current = $location.path().substring(1);
                            }

                            var items = $scope.options.pages;
                            var match = _.find(items, _.matchesProperty('link', current));

                            if (match) {
                                $scope.activeItem = match.id;
                                $scope.expandedItem = match.id;
                                return;

                            } else {

                                for (var s = 0; s < items.length; s++) {

                                    var subMatch = _.find(items[s].subPages, _.matchesProperty('link', current));

                                    if (subMatch) {
                                        $scope.activeItem = subMatch.id;
                                        $scope.expandedItem = items[s].id;
                                        return;
                                    }
                                }
                            }
                        }
                    }
                };

                $scope.toggleMenu = function () {
                    $scope.options.open = !$scope.options.open;
                };

                $scope.toggleState = function (id) {
                    if ($scope.expandedItem === id) {
                        $scope.expandedItem = null;
                    } else {
                        $scope.expandedItem = id;
                    }
                };

                $scope.collapseMenu = function () {
                    $scope.options.mini = !$scope.options.mini;

                    $timeout(function () {
                        $scope.$apply();
                    });
                };

                $scope.checkActivePages = function (page) {

                    if ($scope.menuType === 'vertical-nav') {

                        var subPages = page.subPages;

                        if ($scope.activeItem === page.id) {
                            return true;
                        } else {
                            if (subPages) {
                                for (var s = 0; s < subPages.length; s++) {
                                    if (subPages[s].id === $scope.activeItem) {
                                        return true;
                                    }
                                }
                            }
                        }
                        return false;
                    }

                };

                $scope.goToPage = function (e, url, id, parentId) {

                    if (url) {

                        if ($scope.activeItem !== id) {
                            $scope.activeItem = id;

                            if (parentId) {
                                $scope.expandedItem = parentId;
                            } else {
                                $scope.expandedItem = id;
                            }
                        }

                        $location.path('/' + url);

                        if ($scope.media.phone || $scope.media.tablet) {
                            $scope.options.open = false;
                        }

                    } else {
                        if (!parentId) {
                            $scope.toggleState(id);
                        }
                    }
                    e.stopPropagation();
                };

                $scope.checkLink = function (obj) {
                    if (obj.subPages && obj.subPages.length) {
                        return false;
                    } else {
                        return obj.link;
                    }
                };

                var init = function () {

                    $scope.$watch('options.pages', function (newVal) {
                        if (newVal) {
                            $scope.highlightPage();
                        }
                    });
                };

                return init();
            }
        };

    }

})();

/*jshint latedef:false*/

//Directive - ssMenuItem

(function () {
    'use strict';

    angular
        .module('ssMenuItem',[])
        .directive('ssMenuItem', ssMenuItem);

    ssMenuItem.$inject = [];

    function ssMenuItem() {

        return {
            restrict: 'A',
            templateUrl: 'components/menu/menu-item.template.html',
        };
    }

})();

/*jshint latedef:false*/

//Directive - ssMessages

(function () {
    'use strict';

    angular
        .module('ssMessages', [
            'app.service.global'
        ])
        .directive('ssMessages', ssMessages);

    ssMessages.$inject = [];

    function ssMessages() {

        return {
            restrict: 'E',
            templateUrl: 'components/messages/messages.template.html',
            scope: {
                messages: '='
            },
            controller: function ($scope, $timeout, $location, GlobalFactory) {

                $scope.paused = false;

                $scope.goToPage = function (url, force) {

                    if (force) {
                        GlobalFactory.inMotion(true);
                    }
                    $location.path('/' + url);
                };

                $scope.pauseMessages = function (pause) {
                    if (pause) {
                        $scope.paused = true;
                    } else {
                        $scope.paused = false;
                    }
                    console.log($scope.paused);
                };

                $scope.removeItem = function (array, item) {
                    item.dismiss = true;
                    $timeout(function () {
                        _.remove(array, item);
                    }, 300);
                };

                $scope.removeAllMessages = function () {
                    for (var s = 0; s < $scope.messages.length; s++) {
                        $scope.removeItem($scope.messages, $scope.messages[s]);
                    }
                };

                $scope.progress = function (array, item) {

                    item.percent = item.count * 100 / item.countCopy;

                    if (item.count > 0) {
                        $timeout(function () {
                            if ($scope.paused === false) {
                                item.count = item.count - 1;
                            }
                            $scope.progress(array, item);
                        }, 100);
                    } else {
                        $scope.removeItem(array, item);
                    }
                };

                var init = function () {};

                return init();
            }
        };
    }

})();

/*jshint latedef:false*/

//Directive - ssSelect

(function () {
    'use strict';

    angular
        .module('ssSelect', [])
        .directive('ssSelect', ssSelect);

    ssSelect.$inject = [];

    function ssSelect() {

        return {
            restrict: 'E',
            templateUrl: 'components/select/select.template.html',
            scope: {
                model: '=',
                hint: '@',
                label: '@',
                name: '=',
                options: '=',
                selected: '=?',
                primary: '@',
                secondary: '@',
                reverse: '=?',
                pre: '@',
                main: '=',
                sub: '=',
                large: '=',
                required: '=',
                focus: '=?',
                cancelTab: '=?',
                all: '=?',
                action: '&?'
            },
            controller: function ($scope, $http, $filter, $timeout) {

                $scope.autoSelect = true;
                if ($scope.cancelTab) {
                    $scope.autoSelect = false;
                }

                $scope.boxClass = $scope.main;
                $scope.boxSubClass = $scope.sub;
                $scope.boxLargeClass = $scope.large;
                $scope.isRequired = $scope.required;

                $scope.label = $filter('translate')($scope.label);
                $scope.hint = $filter('translate')($scope.hint);

                if ($scope.focus) {
                    $scope.isFocused = 'select';
                } else {
                    $scope.isFocused = false;
                }

                var pre = '';
                if ($scope.pre) {
                    pre = $scope.pre + ' ';
                }

                var searchList = [];

                searchList.push($scope.primary);

                if ($scope.secondary) {
                    searchList.push($scope.secondary);
                }
                
                if ($scope.reverse) {
                    _.reverse(searchList);
                }

                $scope.configOptions = {
                    maxItems: 1,
                    valueField: $scope.primary,
                    labelField: $scope.primary,
                    searchField: searchList,
                    placeholder: $scope.hint,
                    selectOnTab: $scope.autoSelect,
                    sortField: $scope.primary,
                    duplicate: true,
                    render: {
                        option: function (item, escape) {
                            var label = pre + item[$scope.primary];
                            return '<div class="dd-item">' +
                                '<span class="label">' + escape(label) + '</span>' +
                                ($scope.secondary ? '<span class="caption">' + escape(item[$scope.secondary]) + '</span>' : '') +
                                '</div>';
                        }
                    },
                    onInitialize: function (selectize) {
                        $scope.selectName = selectize;

                        if (_.isObject($scope.selected)) {
                            $scope.model = $scope.selected;
                        }

                        if ($scope.selected && $scope.model) {

                            var new_option = [$scope.model];

                            $scope.selectName.addOption(new_option);
                            $scope.selectName.setValue(new_option);

                            $scope.name = $scope.model[$scope.primary];
                        }

                    },
                    onFocus: function () {
                        return $scope.typeClear($scope.selectName);
                    },
                    onBlur: function () {
                        if (!$scope.name || $scope.name === $filter('translate')('app.global.all')) {
                            $scope.model = undefined;
                            $scope.name = undefined;
                            if ($scope.all) {
                                $scope.name = $filter('translate')('app.global.all');
                            }
                            $timeout(function () {
                                $scope.$apply();
                            });
                        }
                    },
                    onChange: function (value) {

                        if (value) {

                            var match = _.find($scope.modelOptions, _.matchesProperty($scope.primary, value));

                            if (match) {
                                $scope.selectName.loadedSearches = {};
                                if (match[$scope.primary] !== $filter('translate')('app.global.all')) {
                                    $scope.model = match;
                                }

                                if (typeof $scope.action === 'function') {
                                    $scope.action();
                                }
                                $scope.name = match[$scope.primary];

                                $timeout(function () {
                                    $scope.$apply();
                                });
                            } else {
                                $scope.model = undefined;
                            }
                        }
                    }
                };

                // Type to clear input - Function

                $scope.typeClear = function (obj) {
                    var inp = $(obj.$control_input);

                    inp.keydown(function (e) {

                        inp.get(0).allowDefault = true;

                        var printable = (e.keyCode >= 106 && e.keyCode <= 122) || // a-z
                            (e.keyCode >= 65 && e.keyCode <= 90) || // A-Z
                            (e.keyCode >= 96 && e.keyCode <= 105) || // 0-9 Keypad
                            (e.keyCode >= 48 && e.keyCode <= 57); // 0-9

                        if (e.keyCode >= 96 && e.keyCode <= 105) {
                            e.keyCode = e.keyCode - 48;
                        }

                        if (inp.val().length < 1 && printable) {
                            e.preventDefault();
                            obj.clear();
                            obj.loadedSearches = {};
                            inp.val(String.fromCharCode(e.keyCode));
                        }
                    });
                };

                $scope.first = true;

                $scope.$watch('options', function () {
                    if ($scope.options) {

                        $scope.modelOptions = $scope.options;

                        var all = {};

                        if ($scope.all && $scope.first) {

                            $scope.first = false;

                            all[$scope.primary] = $filter('translate')('app.global.all');

                            $scope.modelOptions.push(all);

                            $timeout(function () {
                                $scope.$apply();
                            });

                            if (!$scope.selected) {

                                $scope.selectName.addOption([all]);
                                $scope.selectName.setValue([all]);
                                $scope.name = all[$scope.primary];
                            }
                        }
                    }
                }, true);
                
                $scope.$watch('required', function (newVal) {
                    $scope.isRequired = newVal;
                });

            }
        };

    }

})();

/*jshint latedef:false*/

//Directive - ssTab

(function() {
    'use strict';

    angular
        .module('ssTab', [])
        .directive('ssTab', ssTab);

    ssTab.$inject = [];

    function ssTab() {

        return {
            restrict: 'E',
            transclude: true,
            templateUrl: 'components/tabs/tab.template.html',
            require: '^ssTabset',
            scope: {
                heading: '@'
            },
            link: function(scope, elem, attr, ssTabsetCtrl) {
                scope.current = false;
                ssTabsetCtrl.addTab(scope);
            }
        };
    }

})();

/*jshint latedef:false*/

//Directive - ssTabset

(function() {
    'use strict';

    angular
        .module('ssTabset', [
            'ssTab'
        ])
        .directive('ssTabset', ssTabset);

    ssTabset.$inject = [];

    function ssTabset() {

        return {
            restrict: 'E',
            transclude: true,
            templateUrl: 'components/tabs/tabset.template.html',
            scope: {},
            bindToController: true,
            controllerAs: 'ssTabset',
            controller: function() {
                var self = this;
                self.tabs = [];

                self.addTab = function(tab) {
                    self.tabs.push(tab);

                    if (self.tabs.length === 1) {
                        tab.current = true;
                    }
                };

                self.select = function(selectedTab) {
                    angular.forEach(self.tabs, function(tab) {
                        if (tab.current && tab !== selectedTab) {
                            tab.current = false;
                        }
                    });

                    selectedTab.current = true;
                };
            }
        };
    }

})();

/*jshint latedef:false*/

//Directive - ssTimePicker

(function () {
    'use strict';

    angular
        .module('ssTimePicker', [
            'app.service.global'
        ])
        .directive('ssTimePicker', ssTimePicker);

    ssTimePicker.$inject = ['$compile', 'GlobalFactory'];

    function ssTimePicker($compile) {

        return {
            restrict: 'E',
            templateUrl: 'components/time-picker/time-picker.template.html',
            scope: {
                time: '=model',
                date: '=',
                dep: '=?',
                max: '=?',
                required: '=?',
                selected: '=?',
                flip: '=?',
                disable: '=?'
            },
            link: function (scope, element) {
                $compile(element.contents())(scope.$new());
            },
            controller: function ($scope, GlobalFactory) {

                $scope.requiredTime = true;

                if (!$scope.dep) {
                    $scope.dep = null;
                }

                $scope.checkInput = function (e) {

                    var prevent = (e.keyCode >= 65 && e.keyCode <= 90) || (e.keyCode >= 106 && e.keyCode <= 222);

                    if (prevent || e.shiftKey && e.keyCode !== 9 || e.shiftKey && prevent) {
                        e.preventDefault();
                    }
                    $scope.addDivider(e);
                };

                $scope.addDivider = function (e) {

                    if (e.keyCode !== 8) {
                        if ($scope.time && $scope.time.length === 2) {
                            $scope.time = $scope.time + ':';
                        }
                    } else {
                        var temp = $scope.time;
                        if ($scope.time && $scope.time.length === 2) {
                            $scope.time = temp.substring(0, 1);
                        }
                    }
                };

                $scope.checkValidTime = function (date, time, dep) {

                    if ($scope.flip && dep) {
                        dep = GlobalFactory.flipDate(dep);
                    }

                    return GlobalFactory.dateValid(date, time, true, dep, $scope.max);
                };
                
                $scope.formatTime = function (time) {
                    if (time && time.length && time.indexOf(':') === -1) {

                        if (time.length >= 4) {
                            time = time.substring(0, 2) + ':' + time.substring(2, 4);
                        }
                        $scope.time = time;
                    }
                };

                $scope.timeChange = function (item) {
                    $scope.time = (item ? item : undefined);
                };

                $scope.$watch('time', function (newVal) {
                    if (newVal) {
                        if ($scope.selected) {
                            $scope.timeChange(newVal);
                        }
                    }
                });
            }
        };
    }

})();

/*jshint latedef:false*/

//Directive - ssErrorMessages

(function () {
    'use strict';

    angular
        .module('whitelabelApp')
        .directive('ssErrorMessages', ssErrorMessages);

    ssErrorMessages.$inject = [];

    function ssErrorMessages() {

        return {
            restrict: 'E',
            transclude: true,
            replace: true,
            templateUrl: 'core/elements/errors.template.html'
        };

    }

})();

/*jshint latedef:false*/

//Directive - ssDynamicName

(function () {
    'use strict';

    angular
        .module('whitelabelApp')
        .directive('ssDynamicName', ssDynamicName);

    ssDynamicName.$inject = [];

    function ssDynamicName($compile) {

        return {
            restrict: 'A',
            terminal: true,
            priority: 1000,
            link: function (scope, element, attrs) {
                element.attr('name', scope.$eval(attrs.ssDynamicName));
                element.removeAttr('ss-dynamic-name');
                $compile(element)(scope);
            }
        };

    }

})();
/*jshint latedef:false*/

//Directive - jsonText

(function () {
    'use strict';

    angular
        .module('whitelabelApp')
        .directive('jsonText', jsonText);

    jsonText.$inject = [];

    function jsonText() {

        return {
            restrict: 'A',
            require: 'ngModel',
            link: function (scope, element, attr, ngModel) {
                function into(input) {
                    return JSON.parse(input);
                }

                function out(data) {
                    return JSON.stringify(data);
                }
                ngModel.$parsers.push(into);
                ngModel.$formatters.push(out);

            }
        };

    }

})();
/*jshint latedef:false*/

//Directive - ssNotifications

(function () {
    'use strict';

    angular
        .module('whitelabelApp')
        .directive('ssNotifications', ssNotifications);

    ssNotifications.$inject = [];

    function ssNotifications() {

        return {
            restrict: 'E',
            templateUrl: 'core/elements/notifications.template.html'
        };

    }

})();

/*jshint latedef:false*/

//Directive - roles

(function() {
    'use strict';

    angular
        .module('whitelabelApp')
        .directive('roles', roles);

    roles.$inject = ['AuthFactory', 'GlobalFactory'];

    function roles(AuthFactory, GlobalFactory) {

        return {
            restrict: 'A',

            link: function(scope, element, attrs) {

                var roles = JSON.parse(attrs.roles);

                var hide = true;
                if (roles === undefined || roles === null) {
                    hide = false;
                } else {
                    if (AuthFactory.getRole()) {
                        if (roles.length > 0) {
                            hide = !GlobalFactory.inArray(roles, AuthFactory.getRole());
                        } else {
                            hide = false;
                        }
                    }
                }

                if (hide) {
                    element.addClass('ng-hide');
                }

            }
        };

    }

})();

/*jshint latedef:false*/

//Directive - ssTag

(function() {
    'use strict';

    angular
        .module('whitelabelApp')
        .directive('ssTag', ssTag);

    ssTag.$inject = [];

    function ssTag() {

        return {
            restrict: 'E',
            templateUrl: 'core/elements/tag.template.html',
            scope: {
                name: '@',
                tip: '@',
                active: '=',
                juvenile: '=?'
            },
            controller: function($scope, $filter) {
                var addJuv = '';

                if ($scope.juvenile) {
                    addJuv = ' - ' + $filter('translate')('app.global.juvenile');
                }

                if (!$scope.tip) {
                    $scope.theTip = 'NA' + addJuv;
                } else {
                    $scope.theTip = $scope.tip + addJuv;
                }
            }
        };
    }

})();
